// Copyright 2018 Samsung SDS Cloud Native Computing Team authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Samsung CNCT <samsung.cloudnative@gmail.com>

syntax = "proto3";

package cmassh;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";


option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Cluster Manager API SSH provider";
    version: "v0.1.0";
    contact: {
        name: "Samsung CNCT";
        url: "https://github.com/samsung-cnct/cma-ssh";
        email: "samsung.cloudnative@gmail.com";
    };
  };
  external_docs: {
    url: "https://github.com/samsung-cnct/cma-ssh";
    description: "More about Cluster Manager API SSH provider";
  }
  schemes: HTTPS;
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

service Cluster {
    // Will provision a cluster
    rpc CreateCluster (CreateClusterMsg) returns (CreateClusterReply) {
        option (google.api.http) = {
            post : "/api/v1/cluster"
            body : "*"
        };
    }
    // Will retrieve the status of a cluster and its kubeconfig for connectivity
    rpc GetCluster (GetClusterMsg) returns (GetClusterReply) {
        option (google.api.http) = {
            get : "/api/v1/cluster"
        };
    }
    // Will delete a cluster
    rpc DeleteCluster (DeleteClusterMsg) returns (DeleteClusterReply) {
        option (google.api.http) = {
            delete : "/api/v1/cluster"
        };
    }
    // Will retrieve a list of clusters
    rpc GetClusterList (GetClusterListMsg) returns (GetClusterListReply) {
        option (google.api.http) = {
            get : "/api/v1/cluster/list"
        };
    }
    // Will return version information about api server
    rpc GetVersionInformation (GetVersionMsg) returns (GetVersionReply) {
        option (google.api.http) = {
            get : "/api/v1/version"
        };
    }
    // Will add node pool to a provisioned cluster
    rpc AddNodePool (AddNodePoolMsg) returns (AddNodePoolReply) {
        option (google.api.http) = {
            post : "/api/v1/cluster/pool"
            body : "*"
        };
    }
    // Will delete a node pool from a provisioned cluster
    rpc DeleteNodePool (DeleteNodePoolMsg) returns (DeleteNodePoolReply) {
        option (google.api.http) = {
            delete : "/api/v1/cluster/pool"
        };
    }
    // Will scale the number of machines in a node pool for a provisioned cluster
    rpc ScaleNodePool (ScaleNodePoolMsg) returns (ScaleNodePoolReply) {
        option (google.api.http) = {
            put : "/api/v1/cluster/pool"
            body : "*"
        };
    }
    // Will return upgrade options for a given cluster
    rpc GetUpgradeClusterInformation (GetUpgradeClusterInformationMsg) returns (GetUpgradeClusterInformationReply) {
        option (google.api.http) = {
            get : "/api/v1/cluster/upgrade"
        };
    }
    // Will attempt to upgrade a cluster
    rpc UpgradeCluster (UpgradeClusterMsg) returns (UpgradeClusterReply) {
        option (google.api.http) = {
            put : "/api/v1/cluster/upgrade"
            body : "*"
        };
    }
}

enum ClusterStatus {
    // Not set
    STATUS_UNSPECIFIED = 0;
    // The PROVISIONING state indicates the cluster is being created.
    PROVISIONING = 1;
    // The RUNNING state indicates the cluster has been created and is fully usable.
    RUNNING = 2;
    // The RECONCILING state indicates that some work is actively being done on the cluster, such as upgrading the master or node software.
    RECONCILING = 3;
    // The STOPPING state indicates the cluster is being deleted
    STOPPING = 4;
    // The ERROR state indicates the cluster may be unusable
    ERROR = 5;
    // The DEGRADED state indicates the cluster requires user action to restore full functionality
    DEGRADED = 6;
}

message CreateClusterMsg {
    // Name of the cluster to be provisioned
    string name = 1;
    // The version of Kubernetes for worker nodes. Control plane versions are determined by the MachineSpec.
    string k8s_version = 2;
    // Machines which comprise the cluster control plane
    ControlPlaneMachineSpec control_plane_nodes = 3;
    // Machines which comprise the cluster
    repeated MachineSpec worker_node_pools = 4;
}

message CreateClusterReply {
    // Whether or not the cluster was provisioned by this request
    bool ok = 1;
    // The details of the cluster request response
    ClusterItem cluster = 2;
}

message GetClusterMsg {
    // Name of the cluster to be looked up
    string name = 1;
}

message GetClusterReply {
    // Is the cluster in the system
    bool ok = 1;

    ClusterDetailItem cluster = 2;
}

message DeleteClusterMsg {
    // What is the cluster's name to destroy
    string name = 1;
}

message DeleteClusterReply {
    // Could the cluster be destroyed
    bool ok = 1;
    // Status of the request
    string status = 2;
}

message GetClusterListMsg {
}

message GetClusterListReply {
    // Is the cluster in the system
    bool ok = 1;
    // List of clusters
    repeated ClusterItem clusters = 2;
}

message ClusterItem {
    // Name of the cluster
    string name = 1;
    // Additional information about the status of the cluster
    string status_message = 2;
    // The status of the cluster
    ClusterStatus status = 3;
}

message ClusterDetailItem {
    // Name of the cluster
    string name = 1;
    // Additional information about the status of the cluster
    string status_message = 2;
    // What is the kubeconfig to connect to the cluster
    string kubeconfig = 3;
    // The status of the cluster
    ClusterStatus status = 4;
}

message KubernetesLabel {
    // The name of a label
    string name = 1;
    // The value of a label
    string value = 2;
}

// The specification for a set of control plane machines
message ControlPlaneMachineSpec {
    // The labels for the control plane machines
    repeated KubernetesLabel labels = 1;
    // Type of machines to provision (standard or gpu)
    string instanceType = 2;
    // The number of machines
    int32 count = 3;
}

// The specification for a set of machines
message MachineSpec {
    // The name of the machine set
    string name = 1;
    // The labels for the machine set
    repeated KubernetesLabel labels = 2;
    // Type of machines to provision (standard or gpu)
    string instanceType = 3;
    // The number of machines
    int32 count = 4;
}

// Get version of API Server
message GetVersionMsg {
}

// Reply for version request
message GetVersionReply {
    // If operation was OK
    bool ok = 1;

    message VersionInformation {
        // The tag on the git repository
        string git_version = 1;
        // The hash of the git commit
        string git_commit = 2;
        // Whether or not the tree was clean when built
        string git_tree_state = 3;
        // Date of build
        string build_date = 4;
        // Version of go used to compile
        string go_version = 5;
        // Compiler used
        string compiler = 6;
        // Platform it was compiled for / running on
        string platform = 7;
    }

    // Version Information
    VersionInformation version_information = 2;
}

message GetUpgradeClusterInformationMsg {
    // What is the cluster that we are considering for upgrade
    string name = 1;
}

message GetUpgradeClusterInformationReply {
    // Can the cluster be upgraded
    bool ok = 1;
    // What versions are possible right now
    repeated string versions = 2;
}

message UpgradeClusterMsg {
    // What is the cluster that we are considering for upgrade
    string name = 1;
    // What version are we upgrading to?
    string version = 2;
}

message UpgradeClusterReply {
    // Was this a successful request
    bool ok = 1;
}

message AddNodePoolMsg {
    // What is the cluster to add node pools to
    string clusterName = 1;
    // What Machines to add to the cluster
    repeated MachineSpec worker_node_pools = 2;
}

message AddNodePoolReply {
    // Whether or not the node pool was provisioned by this request
    bool ok = 1;
}

message DeleteNodePoolMsg {
    // What is the cluster to delete node pools
    string clusterName = 1;
    // What is the node pool names to delete
    repeated string node_pool_names = 2;
}

message DeleteNodePoolReply {
    // Was this a successful request
    bool ok = 1;
}

message ScaleNodePoolMsg {
    // What is the name of the cluster to scale a node pool
    string clusterName = 1;
    // What node pools to scale
    repeated ScaleNodePoolSpec node_pools = 2;
}

message ScaleNodePoolSpec {
    // What is the node pool name to scale
    string name = 1;
    // Number of machines to scale
    int32 count = 2;
}

message ScaleNodePoolReply {
    // Was this a successful request
    bool ok = 1;
}
