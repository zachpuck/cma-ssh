// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package cmassh

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClusterStatus int32

const (
	// Not set
	ClusterStatus_STATUS_UNSPECIFIED ClusterStatus = 0
	// The PROVISIONING state indicates the cluster is being created.
	ClusterStatus_PROVISIONING ClusterStatus = 1
	// The RUNNING state indicates the cluster has been created and is fully usable.
	ClusterStatus_RUNNING ClusterStatus = 2
	// The RECONCILING state indicates that some work is actively being done on the cluster, such as upgrading the master or node software.
	ClusterStatus_RECONCILING ClusterStatus = 3
	// The STOPPING state indicates the cluster is being deleted
	ClusterStatus_STOPPING ClusterStatus = 4
	// The ERROR state indicates the cluster may be unusable
	ClusterStatus_ERROR ClusterStatus = 5
	// The DEGRADED state indicates the cluster requires user action to restore full functionality
	ClusterStatus_DEGRADED ClusterStatus = 6
)

var ClusterStatus_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "PROVISIONING",
	2: "RUNNING",
	3: "RECONCILING",
	4: "STOPPING",
	5: "ERROR",
	6: "DEGRADED",
}

var ClusterStatus_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"PROVISIONING":       1,
	"RUNNING":            2,
	"RECONCILING":        3,
	"STOPPING":           4,
	"ERROR":              5,
	"DEGRADED":           6,
}

func (x ClusterStatus) String() string {
	return proto.EnumName(ClusterStatus_name, int32(x))
}

func (ClusterStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type CreateClusterMsg struct {
	// Name of the cluster to be provisioned
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of Kubernetes for worker nodes. Control plane versions are determined by the MachineSpec.
	K8SVersion string `protobuf:"bytes,2,opt,name=k8s_version,json=k8sVersion,proto3" json:"k8s_version,omitempty"`
	// Machines which comprise the cluster control plane
	ControlPlaneNodes *ControlPlaneMachineSpec `protobuf:"bytes,3,opt,name=control_plane_nodes,json=controlPlaneNodes,proto3" json:"control_plane_nodes,omitempty"`
	// Machines which comprise the cluster
	WorkerNodePools      []*MachineSpec `protobuf:"bytes,4,rep,name=worker_node_pools,json=workerNodePools,proto3" json:"worker_node_pools,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateClusterMsg) Reset()         { *m = CreateClusterMsg{} }
func (m *CreateClusterMsg) String() string { return proto.CompactTextString(m) }
func (*CreateClusterMsg) ProtoMessage()    {}
func (*CreateClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *CreateClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterMsg.Unmarshal(m, b)
}
func (m *CreateClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterMsg.Marshal(b, m, deterministic)
}
func (m *CreateClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterMsg.Merge(m, src)
}
func (m *CreateClusterMsg) XXX_Size() int {
	return xxx_messageInfo_CreateClusterMsg.Size(m)
}
func (m *CreateClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterMsg proto.InternalMessageInfo

func (m *CreateClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterMsg) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *CreateClusterMsg) GetControlPlaneNodes() *ControlPlaneMachineSpec {
	if m != nil {
		return m.ControlPlaneNodes
	}
	return nil
}

func (m *CreateClusterMsg) GetWorkerNodePools() []*MachineSpec {
	if m != nil {
		return m.WorkerNodePools
	}
	return nil
}

type CreateClusterReply struct {
	// Whether or not the cluster was provisioned by this request
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// The details of the cluster request response
	Cluster              *ClusterItem `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateClusterReply) Reset()         { *m = CreateClusterReply{} }
func (m *CreateClusterReply) String() string { return proto.CompactTextString(m) }
func (*CreateClusterReply) ProtoMessage()    {}
func (*CreateClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *CreateClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterReply.Unmarshal(m, b)
}
func (m *CreateClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterReply.Marshal(b, m, deterministic)
}
func (m *CreateClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterReply.Merge(m, src)
}
func (m *CreateClusterReply) XXX_Size() int {
	return xxx_messageInfo_CreateClusterReply.Size(m)
}
func (m *CreateClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterReply proto.InternalMessageInfo

func (m *CreateClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CreateClusterReply) GetCluster() *ClusterItem {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type GetClusterMsg struct {
	// Name of the cluster to be looked up
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterMsg) Reset()         { *m = GetClusterMsg{} }
func (m *GetClusterMsg) String() string { return proto.CompactTextString(m) }
func (*GetClusterMsg) ProtoMessage()    {}
func (*GetClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *GetClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterMsg.Unmarshal(m, b)
}
func (m *GetClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterMsg.Marshal(b, m, deterministic)
}
func (m *GetClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterMsg.Merge(m, src)
}
func (m *GetClusterMsg) XXX_Size() int {
	return xxx_messageInfo_GetClusterMsg.Size(m)
}
func (m *GetClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterMsg proto.InternalMessageInfo

func (m *GetClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetClusterReply struct {
	// Is the cluster in the system
	Ok                   bool               `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Cluster              *ClusterDetailItem `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetClusterReply) Reset()         { *m = GetClusterReply{} }
func (m *GetClusterReply) String() string { return proto.CompactTextString(m) }
func (*GetClusterReply) ProtoMessage()    {}
func (*GetClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *GetClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterReply.Unmarshal(m, b)
}
func (m *GetClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterReply.Marshal(b, m, deterministic)
}
func (m *GetClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterReply.Merge(m, src)
}
func (m *GetClusterReply) XXX_Size() int {
	return xxx_messageInfo_GetClusterReply.Size(m)
}
func (m *GetClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterReply proto.InternalMessageInfo

func (m *GetClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetClusterReply) GetCluster() *ClusterDetailItem {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type DeleteClusterMsg struct {
	// What is the cluster's name to destroy
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterMsg) Reset()         { *m = DeleteClusterMsg{} }
func (m *DeleteClusterMsg) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterMsg) ProtoMessage()    {}
func (*DeleteClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *DeleteClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterMsg.Unmarshal(m, b)
}
func (m *DeleteClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterMsg.Marshal(b, m, deterministic)
}
func (m *DeleteClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterMsg.Merge(m, src)
}
func (m *DeleteClusterMsg) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterMsg.Size(m)
}
func (m *DeleteClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterMsg proto.InternalMessageInfo

func (m *DeleteClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteClusterReply struct {
	// Could the cluster be destroyed
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// Status of the request
	Status               string   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterReply) Reset()         { *m = DeleteClusterReply{} }
func (m *DeleteClusterReply) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterReply) ProtoMessage()    {}
func (*DeleteClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *DeleteClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterReply.Unmarshal(m, b)
}
func (m *DeleteClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterReply.Marshal(b, m, deterministic)
}
func (m *DeleteClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterReply.Merge(m, src)
}
func (m *DeleteClusterReply) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterReply.Size(m)
}
func (m *DeleteClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterReply proto.InternalMessageInfo

func (m *DeleteClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteClusterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetClusterListMsg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterListMsg) Reset()         { *m = GetClusterListMsg{} }
func (m *GetClusterListMsg) String() string { return proto.CompactTextString(m) }
func (*GetClusterListMsg) ProtoMessage()    {}
func (*GetClusterListMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *GetClusterListMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterListMsg.Unmarshal(m, b)
}
func (m *GetClusterListMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterListMsg.Marshal(b, m, deterministic)
}
func (m *GetClusterListMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterListMsg.Merge(m, src)
}
func (m *GetClusterListMsg) XXX_Size() int {
	return xxx_messageInfo_GetClusterListMsg.Size(m)
}
func (m *GetClusterListMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterListMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterListMsg proto.InternalMessageInfo

type GetClusterListReply struct {
	// Is the cluster in the system
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// List of clusters
	Clusters             []*ClusterItem `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetClusterListReply) Reset()         { *m = GetClusterListReply{} }
func (m *GetClusterListReply) String() string { return proto.CompactTextString(m) }
func (*GetClusterListReply) ProtoMessage()    {}
func (*GetClusterListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *GetClusterListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterListReply.Unmarshal(m, b)
}
func (m *GetClusterListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterListReply.Marshal(b, m, deterministic)
}
func (m *GetClusterListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterListReply.Merge(m, src)
}
func (m *GetClusterListReply) XXX_Size() int {
	return xxx_messageInfo_GetClusterListReply.Size(m)
}
func (m *GetClusterListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterListReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterListReply proto.InternalMessageInfo

func (m *GetClusterListReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetClusterListReply) GetClusters() []*ClusterItem {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type ClusterItem struct {
	// Name of the cluster
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Additional information about the status of the cluster
	StatusMessage string `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// The status of the cluster
	Status               ClusterStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cmassh.ClusterStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterItem) Reset()         { *m = ClusterItem{} }
func (m *ClusterItem) String() string { return proto.CompactTextString(m) }
func (*ClusterItem) ProtoMessage()    {}
func (*ClusterItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *ClusterItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterItem.Unmarshal(m, b)
}
func (m *ClusterItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterItem.Marshal(b, m, deterministic)
}
func (m *ClusterItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterItem.Merge(m, src)
}
func (m *ClusterItem) XXX_Size() int {
	return xxx_messageInfo_ClusterItem.Size(m)
}
func (m *ClusterItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterItem.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterItem proto.InternalMessageInfo

func (m *ClusterItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterItem) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ClusterItem) GetStatus() ClusterStatus {
	if m != nil {
		return m.Status
	}
	return ClusterStatus_STATUS_UNSPECIFIED
}

type ClusterDetailItem struct {
	// Name of the cluster
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Additional information about the status of the cluster
	StatusMessage string `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// What is the kubeconfig to connect to the cluster
	Kubeconfig string `protobuf:"bytes,3,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	// The status of the cluster
	Status               ClusterStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cmassh.ClusterStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ClusterDetailItem) Reset()         { *m = ClusterDetailItem{} }
func (m *ClusterDetailItem) String() string { return proto.CompactTextString(m) }
func (*ClusterDetailItem) ProtoMessage()    {}
func (*ClusterDetailItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *ClusterDetailItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterDetailItem.Unmarshal(m, b)
}
func (m *ClusterDetailItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterDetailItem.Marshal(b, m, deterministic)
}
func (m *ClusterDetailItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDetailItem.Merge(m, src)
}
func (m *ClusterDetailItem) XXX_Size() int {
	return xxx_messageInfo_ClusterDetailItem.Size(m)
}
func (m *ClusterDetailItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDetailItem.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDetailItem proto.InternalMessageInfo

func (m *ClusterDetailItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterDetailItem) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ClusterDetailItem) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

func (m *ClusterDetailItem) GetStatus() ClusterStatus {
	if m != nil {
		return m.Status
	}
	return ClusterStatus_STATUS_UNSPECIFIED
}

type KubernetesLabel struct {
	// The name of a label
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of a label
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesLabel) Reset()         { *m = KubernetesLabel{} }
func (m *KubernetesLabel) String() string { return proto.CompactTextString(m) }
func (*KubernetesLabel) ProtoMessage()    {}
func (*KubernetesLabel) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *KubernetesLabel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KubernetesLabel.Unmarshal(m, b)
}
func (m *KubernetesLabel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KubernetesLabel.Marshal(b, m, deterministic)
}
func (m *KubernetesLabel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesLabel.Merge(m, src)
}
func (m *KubernetesLabel) XXX_Size() int {
	return xxx_messageInfo_KubernetesLabel.Size(m)
}
func (m *KubernetesLabel) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesLabel.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesLabel proto.InternalMessageInfo

func (m *KubernetesLabel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubernetesLabel) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// The specification for a set of control plane machines
type ControlPlaneMachineSpec struct {
	// The labels for the control plane machines
	Labels []*KubernetesLabel `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// Type of machines to provision (standard or gpu)
	InstanceType string `protobuf:"bytes,2,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	// The number of machines
	Count                string   `protobuf:"bytes,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlPlaneMachineSpec) Reset()         { *m = ControlPlaneMachineSpec{} }
func (m *ControlPlaneMachineSpec) String() string { return proto.CompactTextString(m) }
func (*ControlPlaneMachineSpec) ProtoMessage()    {}
func (*ControlPlaneMachineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *ControlPlaneMachineSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlPlaneMachineSpec.Unmarshal(m, b)
}
func (m *ControlPlaneMachineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlPlaneMachineSpec.Marshal(b, m, deterministic)
}
func (m *ControlPlaneMachineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPlaneMachineSpec.Merge(m, src)
}
func (m *ControlPlaneMachineSpec) XXX_Size() int {
	return xxx_messageInfo_ControlPlaneMachineSpec.Size(m)
}
func (m *ControlPlaneMachineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPlaneMachineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPlaneMachineSpec proto.InternalMessageInfo

func (m *ControlPlaneMachineSpec) GetLabels() []*KubernetesLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ControlPlaneMachineSpec) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *ControlPlaneMachineSpec) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

// The specification for a set of machines
type MachineSpec struct {
	// The name of the machine set
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The labels for the machine set
	Labels []*KubernetesLabel `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// Type of machines to provision (standard or gpu)
	InstanceType string `protobuf:"bytes,3,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	// The number of machines
	Count                string   `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MachineSpec) Reset()         { *m = MachineSpec{} }
func (m *MachineSpec) String() string { return proto.CompactTextString(m) }
func (*MachineSpec) ProtoMessage()    {}
func (*MachineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *MachineSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MachineSpec.Unmarshal(m, b)
}
func (m *MachineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MachineSpec.Marshal(b, m, deterministic)
}
func (m *MachineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineSpec.Merge(m, src)
}
func (m *MachineSpec) XXX_Size() int {
	return xxx_messageInfo_MachineSpec.Size(m)
}
func (m *MachineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MachineSpec proto.InternalMessageInfo

func (m *MachineSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MachineSpec) GetLabels() []*KubernetesLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MachineSpec) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *MachineSpec) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

// Get version of API Server
type GetVersionMsg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionMsg) Reset()         { *m = GetVersionMsg{} }
func (m *GetVersionMsg) String() string { return proto.CompactTextString(m) }
func (*GetVersionMsg) ProtoMessage()    {}
func (*GetVersionMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *GetVersionMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionMsg.Unmarshal(m, b)
}
func (m *GetVersionMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionMsg.Marshal(b, m, deterministic)
}
func (m *GetVersionMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionMsg.Merge(m, src)
}
func (m *GetVersionMsg) XXX_Size() int {
	return xxx_messageInfo_GetVersionMsg.Size(m)
}
func (m *GetVersionMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionMsg proto.InternalMessageInfo

// Reply for version request
type GetVersionReply struct {
	// If operation was OK
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// Version Information
	VersionInformation   *GetVersionReply_VersionInformation `protobuf:"bytes,2,opt,name=version_information,json=versionInformation,proto3" json:"version_information,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *GetVersionReply) Reset()         { *m = GetVersionReply{} }
func (m *GetVersionReply) String() string { return proto.CompactTextString(m) }
func (*GetVersionReply) ProtoMessage()    {}
func (*GetVersionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *GetVersionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionReply.Unmarshal(m, b)
}
func (m *GetVersionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionReply.Marshal(b, m, deterministic)
}
func (m *GetVersionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionReply.Merge(m, src)
}
func (m *GetVersionReply) XXX_Size() int {
	return xxx_messageInfo_GetVersionReply.Size(m)
}
func (m *GetVersionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionReply proto.InternalMessageInfo

func (m *GetVersionReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetVersionReply) GetVersionInformation() *GetVersionReply_VersionInformation {
	if m != nil {
		return m.VersionInformation
	}
	return nil
}

type GetVersionReply_VersionInformation struct {
	// The tag on the git repository
	GitVersion string `protobuf:"bytes,1,opt,name=git_version,json=gitVersion,proto3" json:"git_version,omitempty"`
	// The hash of the git commit
	GitCommit string `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	// Whether or not the tree was clean when built
	GitTreeState string `protobuf:"bytes,3,opt,name=git_tree_state,json=gitTreeState,proto3" json:"git_tree_state,omitempty"`
	// Date of build
	BuildDate string `protobuf:"bytes,4,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	// Version of go used to compile
	GoVersion string `protobuf:"bytes,5,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	// Compiler used
	Compiler string `protobuf:"bytes,6,opt,name=compiler,proto3" json:"compiler,omitempty"`
	// Platform it was compiled for / running on
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVersionReply_VersionInformation) Reset()         { *m = GetVersionReply_VersionInformation{} }
func (m *GetVersionReply_VersionInformation) String() string { return proto.CompactTextString(m) }
func (*GetVersionReply_VersionInformation) ProtoMessage()    {}
func (*GetVersionReply_VersionInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14, 0}
}

func (m *GetVersionReply_VersionInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVersionReply_VersionInformation.Unmarshal(m, b)
}
func (m *GetVersionReply_VersionInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVersionReply_VersionInformation.Marshal(b, m, deterministic)
}
func (m *GetVersionReply_VersionInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVersionReply_VersionInformation.Merge(m, src)
}
func (m *GetVersionReply_VersionInformation) XXX_Size() int {
	return xxx_messageInfo_GetVersionReply_VersionInformation.Size(m)
}
func (m *GetVersionReply_VersionInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVersionReply_VersionInformation.DiscardUnknown(m)
}

var xxx_messageInfo_GetVersionReply_VersionInformation proto.InternalMessageInfo

func (m *GetVersionReply_VersionInformation) GetGitVersion() string {
	if m != nil {
		return m.GitVersion
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetGitTreeState() string {
	if m != nil {
		return m.GitTreeState
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetCompiler() string {
	if m != nil {
		return m.Compiler
	}
	return ""
}

func (m *GetVersionReply_VersionInformation) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type GetUpgradeClusterInformationMsg struct {
	// What is the cluster that we are considering for upgrade
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpgradeClusterInformationMsg) Reset()         { *m = GetUpgradeClusterInformationMsg{} }
func (m *GetUpgradeClusterInformationMsg) String() string { return proto.CompactTextString(m) }
func (*GetUpgradeClusterInformationMsg) ProtoMessage()    {}
func (*GetUpgradeClusterInformationMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

func (m *GetUpgradeClusterInformationMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpgradeClusterInformationMsg.Unmarshal(m, b)
}
func (m *GetUpgradeClusterInformationMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpgradeClusterInformationMsg.Marshal(b, m, deterministic)
}
func (m *GetUpgradeClusterInformationMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpgradeClusterInformationMsg.Merge(m, src)
}
func (m *GetUpgradeClusterInformationMsg) XXX_Size() int {
	return xxx_messageInfo_GetUpgradeClusterInformationMsg.Size(m)
}
func (m *GetUpgradeClusterInformationMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpgradeClusterInformationMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpgradeClusterInformationMsg proto.InternalMessageInfo

func (m *GetUpgradeClusterInformationMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetUpgradeClusterInformationReply struct {
	// Can the cluster be upgraded
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// What versions are possible right now
	Versions             []string `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpgradeClusterInformationReply) Reset()         { *m = GetUpgradeClusterInformationReply{} }
func (m *GetUpgradeClusterInformationReply) String() string { return proto.CompactTextString(m) }
func (*GetUpgradeClusterInformationReply) ProtoMessage()    {}
func (*GetUpgradeClusterInformationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

func (m *GetUpgradeClusterInformationReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetUpgradeClusterInformationReply.Unmarshal(m, b)
}
func (m *GetUpgradeClusterInformationReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetUpgradeClusterInformationReply.Marshal(b, m, deterministic)
}
func (m *GetUpgradeClusterInformationReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpgradeClusterInformationReply.Merge(m, src)
}
func (m *GetUpgradeClusterInformationReply) XXX_Size() int {
	return xxx_messageInfo_GetUpgradeClusterInformationReply.Size(m)
}
func (m *GetUpgradeClusterInformationReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpgradeClusterInformationReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpgradeClusterInformationReply proto.InternalMessageInfo

func (m *GetUpgradeClusterInformationReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetUpgradeClusterInformationReply) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

type UpgradeClusterMsg struct {
	// What is the cluster that we are considering for upgrade
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// What version are we upgrading to?
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeClusterMsg) Reset()         { *m = UpgradeClusterMsg{} }
func (m *UpgradeClusterMsg) String() string { return proto.CompactTextString(m) }
func (*UpgradeClusterMsg) ProtoMessage()    {}
func (*UpgradeClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

func (m *UpgradeClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeClusterMsg.Unmarshal(m, b)
}
func (m *UpgradeClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeClusterMsg.Marshal(b, m, deterministic)
}
func (m *UpgradeClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeClusterMsg.Merge(m, src)
}
func (m *UpgradeClusterMsg) XXX_Size() int {
	return xxx_messageInfo_UpgradeClusterMsg.Size(m)
}
func (m *UpgradeClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeClusterMsg proto.InternalMessageInfo

func (m *UpgradeClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpgradeClusterMsg) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type UpgradeClusterReply struct {
	// Was this a successful request
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpgradeClusterReply) Reset()         { *m = UpgradeClusterReply{} }
func (m *UpgradeClusterReply) String() string { return proto.CompactTextString(m) }
func (*UpgradeClusterReply) ProtoMessage()    {}
func (*UpgradeClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}

func (m *UpgradeClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpgradeClusterReply.Unmarshal(m, b)
}
func (m *UpgradeClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpgradeClusterReply.Marshal(b, m, deterministic)
}
func (m *UpgradeClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeClusterReply.Merge(m, src)
}
func (m *UpgradeClusterReply) XXX_Size() int {
	return xxx_messageInfo_UpgradeClusterReply.Size(m)
}
func (m *UpgradeClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeClusterReply proto.InternalMessageInfo

func (m *UpgradeClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type AdjustClusterMsg struct {
	// What is the cluster that we are considering for upgrade
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Machines which we want to add to the cluster
	AddNodes []*MachineSpec `protobuf:"bytes,2,rep,name=add_nodes,json=addNodes,proto3" json:"add_nodes,omitempty"`
	// Machines which we want to remove from the cluster
	RemoveNodes          []*AdjustClusterMsg_RemoveMachineSpec `protobuf:"bytes,3,rep,name=remove_nodes,json=removeNodes,proto3" json:"remove_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *AdjustClusterMsg) Reset()         { *m = AdjustClusterMsg{} }
func (m *AdjustClusterMsg) String() string { return proto.CompactTextString(m) }
func (*AdjustClusterMsg) ProtoMessage()    {}
func (*AdjustClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}

func (m *AdjustClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustClusterMsg.Unmarshal(m, b)
}
func (m *AdjustClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustClusterMsg.Marshal(b, m, deterministic)
}
func (m *AdjustClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustClusterMsg.Merge(m, src)
}
func (m *AdjustClusterMsg) XXX_Size() int {
	return xxx_messageInfo_AdjustClusterMsg.Size(m)
}
func (m *AdjustClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustClusterMsg proto.InternalMessageInfo

func (m *AdjustClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AdjustClusterMsg) GetAddNodes() []*MachineSpec {
	if m != nil {
		return m.AddNodes
	}
	return nil
}

func (m *AdjustClusterMsg) GetRemoveNodes() []*AdjustClusterMsg_RemoveMachineSpec {
	if m != nil {
		return m.RemoveNodes
	}
	return nil
}

type AdjustClusterMsg_RemoveMachineSpec struct {
	// The ip of machine
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdjustClusterMsg_RemoveMachineSpec) Reset()         { *m = AdjustClusterMsg_RemoveMachineSpec{} }
func (m *AdjustClusterMsg_RemoveMachineSpec) String() string { return proto.CompactTextString(m) }
func (*AdjustClusterMsg_RemoveMachineSpec) ProtoMessage()    {}
func (*AdjustClusterMsg_RemoveMachineSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19, 0}
}

func (m *AdjustClusterMsg_RemoveMachineSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustClusterMsg_RemoveMachineSpec.Unmarshal(m, b)
}
func (m *AdjustClusterMsg_RemoveMachineSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustClusterMsg_RemoveMachineSpec.Marshal(b, m, deterministic)
}
func (m *AdjustClusterMsg_RemoveMachineSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustClusterMsg_RemoveMachineSpec.Merge(m, src)
}
func (m *AdjustClusterMsg_RemoveMachineSpec) XXX_Size() int {
	return xxx_messageInfo_AdjustClusterMsg_RemoveMachineSpec.Size(m)
}
func (m *AdjustClusterMsg_RemoveMachineSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustClusterMsg_RemoveMachineSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustClusterMsg_RemoveMachineSpec proto.InternalMessageInfo

func (m *AdjustClusterMsg_RemoveMachineSpec) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type AdjustClusterReply struct {
	// Was this a successful request
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdjustClusterReply) Reset()         { *m = AdjustClusterReply{} }
func (m *AdjustClusterReply) String() string { return proto.CompactTextString(m) }
func (*AdjustClusterReply) ProtoMessage()    {}
func (*AdjustClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}

func (m *AdjustClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustClusterReply.Unmarshal(m, b)
}
func (m *AdjustClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustClusterReply.Marshal(b, m, deterministic)
}
func (m *AdjustClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustClusterReply.Merge(m, src)
}
func (m *AdjustClusterReply) XXX_Size() int {
	return xxx_messageInfo_AdjustClusterReply.Size(m)
}
func (m *AdjustClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustClusterReply proto.InternalMessageInfo

func (m *AdjustClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterEnum("cmassh.ClusterStatus", ClusterStatus_name, ClusterStatus_value)
	proto.RegisterType((*CreateClusterMsg)(nil), "cmassh.CreateClusterMsg")
	proto.RegisterType((*CreateClusterReply)(nil), "cmassh.CreateClusterReply")
	proto.RegisterType((*GetClusterMsg)(nil), "cmassh.GetClusterMsg")
	proto.RegisterType((*GetClusterReply)(nil), "cmassh.GetClusterReply")
	proto.RegisterType((*DeleteClusterMsg)(nil), "cmassh.DeleteClusterMsg")
	proto.RegisterType((*DeleteClusterReply)(nil), "cmassh.DeleteClusterReply")
	proto.RegisterType((*GetClusterListMsg)(nil), "cmassh.GetClusterListMsg")
	proto.RegisterType((*GetClusterListReply)(nil), "cmassh.GetClusterListReply")
	proto.RegisterType((*ClusterItem)(nil), "cmassh.ClusterItem")
	proto.RegisterType((*ClusterDetailItem)(nil), "cmassh.ClusterDetailItem")
	proto.RegisterType((*KubernetesLabel)(nil), "cmassh.KubernetesLabel")
	proto.RegisterType((*ControlPlaneMachineSpec)(nil), "cmassh.ControlPlaneMachineSpec")
	proto.RegisterType((*MachineSpec)(nil), "cmassh.MachineSpec")
	proto.RegisterType((*GetVersionMsg)(nil), "cmassh.GetVersionMsg")
	proto.RegisterType((*GetVersionReply)(nil), "cmassh.GetVersionReply")
	proto.RegisterType((*GetVersionReply_VersionInformation)(nil), "cmassh.GetVersionReply.VersionInformation")
	proto.RegisterType((*GetUpgradeClusterInformationMsg)(nil), "cmassh.GetUpgradeClusterInformationMsg")
	proto.RegisterType((*GetUpgradeClusterInformationReply)(nil), "cmassh.GetUpgradeClusterInformationReply")
	proto.RegisterType((*UpgradeClusterMsg)(nil), "cmassh.UpgradeClusterMsg")
	proto.RegisterType((*UpgradeClusterReply)(nil), "cmassh.UpgradeClusterReply")
	proto.RegisterType((*AdjustClusterMsg)(nil), "cmassh.AdjustClusterMsg")
	proto.RegisterType((*AdjustClusterMsg_RemoveMachineSpec)(nil), "cmassh.AdjustClusterMsg.RemoveMachineSpec")
	proto.RegisterType((*AdjustClusterReply)(nil), "cmassh.AdjustClusterReply")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4b, 0x6f, 0xdb, 0xc6,
	0x13, 0xff, 0x53, 0xb6, 0x65, 0x6b, 0xe4, 0x87, 0xb4, 0x8e, 0x63, 0x45, 0x7f, 0xa7, 0x56, 0x99,
	0xa4, 0x49, 0xdd, 0x5a, 0x4a, 0x1c, 0x14, 0x08, 0xdc, 0x02, 0xad, 0x2b, 0xb9, 0xae, 0xd0, 0xe8,
	0x01, 0xca, 0xf6, 0xa5, 0x40, 0xd5, 0x15, 0xb5, 0xa6, 0x19, 0x93, 0x5c, 0x82, 0x5c, 0x2a, 0xc8,
	0xa5, 0x87, 0xa0, 0x3d, 0x14, 0xe8, 0xa9, 0x39, 0xf7, 0x1b, 0xf5, 0xd6, 0x53, 0xee, 0xfd, 0x00,
	0xed, 0x37, 0x28, 0x76, 0x49, 0x4a, 0x7c, 0xc9, 0x31, 0xda, 0x93, 0x3d, 0x8f, 0xfd, 0xcd, 0x6f,
	0x66, 0x67, 0x67, 0x28, 0x28, 0x60, 0x5b, 0xaf, 0xdb, 0x0e, 0x65, 0x14, 0xe5, 0x55, 0x13, 0xbb,
	0xee, 0x65, 0x75, 0x47, 0xa3, 0x54, 0x33, 0x48, 0x03, 0xdb, 0x7a, 0x03, 0x5b, 0x16, 0x65, 0x98,
	0xe9, 0xd4, 0x72, 0x7d, 0xaf, 0xea, 0xc7, 0xe2, 0x8f, 0xba, 0xaf, 0x11, 0x6b, 0xdf, 0x7d, 0x89,
	0x35, 0x8d, 0x38, 0x0d, 0x6a, 0x0b, 0x8f, 0xb4, 0xb7, 0xfc, 0x56, 0x82, 0x52, 0xd3, 0x21, 0x98,
	0x91, 0xa6, 0xe1, 0xb9, 0x8c, 0x38, 0x1d, 0x57, 0x43, 0x08, 0x16, 0x2d, 0x6c, 0x92, 0x8a, 0x54,
	0x93, 0x1e, 0x15, 0x14, 0xf1, 0x3f, 0xda, 0x85, 0xe2, 0xd5, 0x33, 0x77, 0x38, 0x21, 0x8e, 0xab,
	0x53, 0xab, 0x92, 0x13, 0x26, 0xb8, 0x7a, 0xe6, 0x9e, 0xfb, 0x1a, 0xd4, 0x83, 0x4d, 0x95, 0x5a,
	0xcc, 0xa1, 0xc6, 0xd0, 0x36, 0xb0, 0x45, 0x86, 0x16, 0x1d, 0x13, 0xb7, 0xb2, 0x50, 0x93, 0x1e,
	0x15, 0x0f, 0x76, 0xeb, 0x3e, 0xf7, 0x7a, 0xd3, 0x77, 0xe9, 0x73, 0x8f, 0x0e, 0x56, 0x2f, 0x75,
	0x8b, 0x0c, 0x6c, 0xa2, 0x2a, 0x65, 0x35, 0x62, 0xe8, 0xf2, 0x93, 0xe8, 0x73, 0x28, 0xbf, 0xa4,
	0xce, 0x15, 0x71, 0x04, 0xd2, 0xd0, 0xa6, 0xd4, 0x70, 0x2b, 0x8b, 0xb5, 0x85, 0x47, 0xc5, 0x83,
	0xcd, 0x10, 0x2e, 0x0a, 0xb1, 0xe1, 0x7b, 0xf3, 0xc3, 0x7d, 0xee, 0x2b, 0x0f, 0x00, 0xc5, 0x52,
	0x53, 0x88, 0x6d, 0xbc, 0x42, 0xeb, 0x90, 0xa3, 0x57, 0x22, 0xb5, 0x15, 0x25, 0x47, 0xaf, 0xd0,
	0x3e, 0x2c, 0xab, 0xbe, 0x5d, 0x24, 0x15, 0x01, 0x0f, 0x8e, 0xb5, 0x19, 0x31, 0x95, 0xd0, 0x47,
	0xbe, 0x07, 0x6b, 0x27, 0x84, 0x5d, 0x5f, 0x2c, 0xf9, 0x1c, 0x36, 0x66, 0x4e, 0xd9, 0x61, 0x9f,
	0x26, 0xc3, 0xde, 0x49, 0x84, 0x6d, 0x11, 0x86, 0x75, 0x23, 0x1e, 0xfc, 0x03, 0x28, 0xb5, 0x88,
	0x41, 0xde, 0x75, 0x59, 0xf2, 0x67, 0x80, 0x62, 0x7e, 0xd9, 0x14, 0x6e, 0x43, 0xde, 0x65, 0x98,
	0x79, 0x6e, 0x70, 0x9b, 0x81, 0x24, 0x6f, 0x42, 0x79, 0xc6, 0xfe, 0xb9, 0xee, 0xb2, 0x8e, 0xab,
	0xc9, 0xe7, 0xb0, 0x19, 0x57, 0x66, 0x63, 0x36, 0x60, 0x25, 0x20, 0xcb, 0x51, 0x17, 0xe6, 0x95,
	0x73, 0xea, 0x24, 0xbf, 0x84, 0x62, 0xc4, 0x90, 0xd9, 0x7a, 0x0f, 0x60, 0xdd, 0x67, 0x36, 0x34,
	0x89, 0xeb, 0x62, 0x8d, 0x04, 0x7c, 0xd7, 0x7c, 0x6d, 0xc7, 0x57, 0xa2, 0xfd, 0x69, 0x3a, 0xbc,
	0xe7, 0xd6, 0x0f, 0xb6, 0x12, 0x81, 0x07, 0xc2, 0x38, 0xcd, 0xf2, 0x37, 0x09, 0xca, 0xa9, 0x52,
	0xff, 0x97, 0xf8, 0xef, 0x01, 0x5c, 0x79, 0x23, 0xa2, 0x52, 0xeb, 0x42, 0xd7, 0x04, 0x07, 0xfe,
	0x40, 0xa6, 0x9a, 0x08, 0xbf, 0xc5, 0x9b, 0xf0, 0xfb, 0x14, 0x36, 0xbe, 0xf1, 0x46, 0xc4, 0xb1,
	0x08, 0x23, 0xee, 0x73, 0x3c, 0x22, 0x46, 0x26, 0xb9, 0x5b, 0xb0, 0x34, 0xc1, 0x86, 0x17, 0x72,
	0xf2, 0x05, 0xf9, 0x47, 0x09, 0xb6, 0xe7, 0x3c, 0x35, 0xd4, 0x80, 0xbc, 0xc1, 0xe1, 0xdc, 0x8a,
	0x24, 0x2e, 0x68, 0x3b, 0xe4, 0x91, 0x08, 0xa7, 0x04, 0x6e, 0x48, 0x86, 0x55, 0xdd, 0x72, 0x19,
	0xb6, 0x54, 0x72, 0xfa, 0xca, 0x0e, 0x23, 0xc5, 0x74, 0x9c, 0x86, 0x4a, 0x3d, 0x8b, 0x05, 0x79,
	0xfb, 0x82, 0xfc, 0x8b, 0x04, 0xc5, 0x68, 0xe8, 0xac, 0x04, 0x66, 0x74, 0x72, 0xff, 0x8e, 0xce,
	0xc2, 0x75, 0x74, 0x16, 0xa3, 0x74, 0x36, 0xc4, 0xdb, 0x0d, 0x06, 0x16, 0x6f, 0xea, 0xbf, 0x73,
	0xe2, 0xa1, 0x06, 0x9a, 0xec, 0x8e, 0xfe, 0x16, 0x36, 0x83, 0xa1, 0x37, 0xd4, 0xad, 0x0b, 0xea,
	0x98, 0x62, 0x7e, 0x06, 0x8f, 0x76, 0x2f, 0x24, 0x9b, 0x40, 0xa9, 0x07, 0x42, 0x7b, 0x76, 0x42,
	0x41, 0x93, 0x94, 0xae, 0xfa, 0x97, 0x04, 0x28, 0xed, 0xca, 0x87, 0xad, 0xa6, 0xb3, 0xe9, 0xb0,
	0xf5, 0xcb, 0x05, 0x9a, 0x1e, 0xc6, 0x40, 0x77, 0x81, 0x4b, 0x43, 0x95, 0x9a, 0xa6, 0xce, 0x82,
	0x0b, 0x29, 0x68, 0x3a, 0x6b, 0x0a, 0x05, 0xba, 0x0f, 0xeb, 0xdc, 0xcc, 0x1c, 0x42, 0x86, 0xbc,
	0x9d, 0xa6, 0x45, 0xd2, 0x74, 0x76, 0xea, 0x10, 0xc2, 0x5b, 0x8d, 0x70, 0x90, 0x91, 0xa7, 0x1b,
	0xe3, 0xe1, 0x98, 0x7b, 0xf8, 0x95, 0x2a, 0x08, 0x4d, 0x2b, 0x30, 0x6b, 0x74, 0xca, 0x61, 0x29,
	0x88, 0x41, 0x43, 0x0a, 0x55, 0x58, 0x51, 0xa9, 0x69, 0xeb, 0x06, 0x71, 0x2a, 0x79, 0x61, 0x9c,
	0xca, 0xdc, 0x66, 0x1b, 0x98, 0xf1, 0x84, 0x2a, 0xcb, 0xbe, 0x2d, 0x94, 0xe5, 0x4f, 0x60, 0xf7,
	0x84, 0xb0, 0x33, 0x5b, 0x73, 0xf0, 0x38, 0x9c, 0x4f, 0x91, 0xdc, 0xe7, 0x8d, 0xb4, 0x1e, 0xbc,
	0x7f, 0xdd, 0xb1, 0xec, 0xbb, 0xab, 0xc2, 0x4a, 0xc0, 0xdf, 0xef, 0xae, 0x82, 0x32, 0x95, 0xe5,
	0x23, 0x28, 0xc7, 0xd1, 0xe6, 0x6d, 0xbe, 0x0a, 0x2c, 0xc7, 0xb7, 0x5e, 0x28, 0xca, 0x0f, 0x60,
	0x33, 0x0e, 0x91, 0xc9, 0x42, 0xfe, 0x5d, 0x82, 0xd2, 0xd1, 0xf8, 0x85, 0xe7, 0xbe, 0x63, 0x6d,
	0xa0, 0xc7, 0x50, 0xc0, 0xe3, 0x71, 0xb0, 0x38, 0x73, 0xf3, 0x37, 0xdd, 0x0a, 0x1e, 0x8f, 0xfd,
	0x1d, 0xd9, 0x81, 0x55, 0x87, 0x98, 0x74, 0x32, 0xdb, 0xb6, 0x0b, 0xd1, 0xae, 0x4c, 0x46, 0xad,
	0x2b, 0xc2, 0x39, 0x8a, 0x55, 0xf4, 0xcf, 0x0b, 0xb8, 0xea, 0x3d, 0x28, 0xa7, 0x3c, 0x78, 0x3a,
	0xba, 0x1d, 0xf0, 0xcc, 0xe9, 0xb6, 0x7c, 0x1f, 0x50, 0x0c, 0x37, 0x33, 0xe9, 0xbd, 0x1f, 0x60,
	0x2d, 0x36, 0xd7, 0xd0, 0x6d, 0x40, 0x83, 0xd3, 0xa3, 0xd3, 0xb3, 0xc1, 0xf0, 0xac, 0x3b, 0xe8,
	0x1f, 0x37, 0xdb, 0x5f, 0xb5, 0x8f, 0x5b, 0xa5, 0xff, 0xa1, 0x12, 0xac, 0xf6, 0x95, 0xde, 0x79,
	0x7b, 0xd0, 0xee, 0x75, 0xdb, 0xdd, 0x93, 0x92, 0x84, 0x8a, 0xb0, 0xac, 0x9c, 0x75, 0x85, 0x90,
	0x43, 0x1b, 0x50, 0x54, 0x8e, 0x9b, 0xbd, 0x6e, 0xb3, 0xfd, 0x9c, 0x2b, 0x16, 0xd0, 0x2a, 0xac,
	0x0c, 0x4e, 0x7b, 0xfd, 0x3e, 0x97, 0x16, 0x51, 0x01, 0x96, 0x8e, 0x15, 0xa5, 0xa7, 0x94, 0x96,
	0xb8, 0xa1, 0x75, 0x7c, 0xa2, 0x1c, 0xb5, 0x8e, 0x5b, 0xa5, 0xfc, 0xc1, 0xdb, 0x3c, 0x2c, 0x07,
	0x04, 0x10, 0x86, 0xb5, 0xd8, 0x87, 0x00, 0xaa, 0x4c, 0x47, 0x6f, 0xe2, 0xd3, 0xa7, 0x5a, 0xcd,
	0xb4, 0x88, 0x14, 0xe5, 0xea, 0xeb, 0x3f, 0xfe, 0x7c, 0x93, 0xbb, 0x25, 0x6f, 0x88, 0x2f, 0xaf,
	0xc9, 0x93, 0x46, 0xb0, 0xc4, 0x0e, 0xa5, 0x3d, 0x74, 0x06, 0x30, 0x5b, 0x8f, 0x68, 0x2b, 0x32,
	0x16, 0x22, 0xe0, 0xdb, 0x69, 0xb5, 0x8f, 0xbc, 0x2d, 0x90, 0xcb, 0x28, 0x89, 0x8c, 0xbe, 0x83,
	0xb5, 0xd8, 0x22, 0x9f, 0x31, 0x4f, 0x7e, 0x07, 0xcc, 0x98, 0xa7, 0x37, 0x7f, 0x88, 0xbf, 0x97,
	0xc2, 0xbf, 0x80, 0xf5, 0xf8, 0x56, 0x47, 0x77, 0xd2, 0x1c, 0x83, 0x4f, 0x80, 0xea, 0xff, 0xb3,
	0x4d, 0x7e, 0x88, 0x1d, 0x11, 0xe2, 0x36, 0xba, 0x95, 0x08, 0xd1, 0x30, 0x38, 0xea, 0xf7, 0xb0,
	0x35, 0x9b, 0x90, 0xd1, 0x49, 0xb7, 0x95, 0x1e, 0xa0, 0xc9, 0x4a, 0x45, 0xe7, 0x6a, 0xba, 0x52,
	0xc1, 0x5b, 0x44, 0x17, 0x89, 0xae, 0xf4, 0xdf, 0x47, 0x65, 0xde, 0x4b, 0x98, 0x95, 0x2b, 0xdd,
	0xcb, 0xe1, 0x45, 0x57, 0xb3, 0x2e, 0xfa, 0x8d, 0x04, 0x3b, 0xd7, 0x0d, 0x22, 0xf4, 0x30, 0x42,
	0xfd, 0xba, 0x29, 0x57, 0xfd, 0xf0, 0x26, 0x8e, 0x3e, 0xa1, 0x5d, 0x41, 0xe8, 0x0e, 0xda, 0x4e,
	0x16, 0xd7, 0xf3, 0xcf, 0x21, 0x03, 0xd6, 0xe3, 0x10, 0xb3, 0x7b, 0x4c, 0x0d, 0xb9, 0xd9, 0x3d,
	0x66, 0x0c, 0x2f, 0x59, 0x16, 0xa1, 0x76, 0xaa, 0xf3, 0x42, 0x1d, 0x4a, 0x7b, 0x5f, 0xfe, 0x9c,
	0xfb, 0xf5, 0xe8, 0xa7, 0x1c, 0x7a, 0x2d, 0x41, 0x2d, 0x38, 0x5b, 0xeb, 0x60, 0x0b, 0x6b, 0xc4,
	0xa9, 0x1d, 0xf5, 0xdb, 0xb5, 0xc1, 0xe0, 0xeb, 0x9a, 0xed, 0xd0, 0x89, 0x3e, 0x26, 0x8e, 0x7c,
	0x0e, 0xab, 0x03, 0x6c, 0xba, 0x9e, 0xa5, 0xd5, 0x9a, 0xdd, 0xe6, 0x29, 0x7a, 0x78, 0xc9, 0x98,
	0xed, 0x1e, 0x36, 0x1a, 0x9a, 0xce, 0x2e, 0xbd, 0x51, 0x5d, 0xa5, 0x66, 0xc3, 0xf5, 0x1d, 0xf6,
	0x55, 0x4b, 0x65, 0x0d, 0xd5, 0xc4, 0xfb, 0xfc, 0x57, 0xce, 0xdd, 0x40, 0x5b, 0x57, 0x0d, 0xea,
	0x8d, 0x2d, 0xcc, 0xf4, 0x09, 0xf9, 0x42, 0x33, 0xb1, 0x6e, 0xf0, 0x33, 0x07, 0xf9, 0xc9, 0xe3,
	0xfa, 0x93, 0xfa, 0xe3, 0xbd, 0x5c, 0x4e, 0x3a, 0x28, 0x61, 0xdb, 0x36, 0x74, 0x55, 0x14, 0xac,
	0xf1, 0xc2, 0xa5, 0xd6, 0x61, 0x4a, 0xe3, 0x9c, 0xc3, 0x47, 0x1d, 0xea, 0x90, 0x1a, 0x1e, 0x51,
	0x8f, 0xbd, 0x93, 0xf6, 0x8d, 0x69, 0x8e, 0xf2, 0xe2, 0x77, 0xd4, 0xd3, 0x7f, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x77, 0x69, 0xd5, 0x16, 0xa8, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	// Will provision a cluster
	CreateCluster(ctx context.Context, in *CreateClusterMsg, opts ...grpc.CallOption) (*CreateClusterReply, error)
	// Will retrieve the status of a cluster and its kubeconfig for connectivity
	GetCluster(ctx context.Context, in *GetClusterMsg, opts ...grpc.CallOption) (*GetClusterReply, error)
	// Will delete a cluster
	DeleteCluster(ctx context.Context, in *DeleteClusterMsg, opts ...grpc.CallOption) (*DeleteClusterReply, error)
	// Will retrieve a list of clusters
	GetClusterList(ctx context.Context, in *GetClusterListMsg, opts ...grpc.CallOption) (*GetClusterListReply, error)
	// Will return version information about api server
	GetVersionInformation(ctx context.Context, in *GetVersionMsg, opts ...grpc.CallOption) (*GetVersionReply, error)
	// Will adjust a provision a cluster
	AdjustClusterNodes(ctx context.Context, in *AdjustClusterMsg, opts ...grpc.CallOption) (*AdjustClusterReply, error)
	// Will return upgrade options for a given cluster
	GetUpgradeClusterInformation(ctx context.Context, in *GetUpgradeClusterInformationMsg, opts ...grpc.CallOption) (*GetUpgradeClusterInformationReply, error)
	// Will attempt to upgrade a cluster
	UpgradeCluster(ctx context.Context, in *UpgradeClusterMsg, opts ...grpc.CallOption) (*UpgradeClusterReply, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) CreateCluster(ctx context.Context, in *CreateClusterMsg, opts ...grpc.CallOption) (*CreateClusterReply, error) {
	out := new(CreateClusterReply)
	err := c.cc.Invoke(ctx, "/cmassh.Cluster/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetCluster(ctx context.Context, in *GetClusterMsg, opts ...grpc.CallOption) (*GetClusterReply, error) {
	out := new(GetClusterReply)
	err := c.cc.Invoke(ctx, "/cmassh.Cluster/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteCluster(ctx context.Context, in *DeleteClusterMsg, opts ...grpc.CallOption) (*DeleteClusterReply, error) {
	out := new(DeleteClusterReply)
	err := c.cc.Invoke(ctx, "/cmassh.Cluster/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetClusterList(ctx context.Context, in *GetClusterListMsg, opts ...grpc.CallOption) (*GetClusterListReply, error) {
	out := new(GetClusterListReply)
	err := c.cc.Invoke(ctx, "/cmassh.Cluster/GetClusterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetVersionInformation(ctx context.Context, in *GetVersionMsg, opts ...grpc.CallOption) (*GetVersionReply, error) {
	out := new(GetVersionReply)
	err := c.cc.Invoke(ctx, "/cmassh.Cluster/GetVersionInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) AdjustClusterNodes(ctx context.Context, in *AdjustClusterMsg, opts ...grpc.CallOption) (*AdjustClusterReply, error) {
	out := new(AdjustClusterReply)
	err := c.cc.Invoke(ctx, "/cmassh.Cluster/AdjustClusterNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetUpgradeClusterInformation(ctx context.Context, in *GetUpgradeClusterInformationMsg, opts ...grpc.CallOption) (*GetUpgradeClusterInformationReply, error) {
	out := new(GetUpgradeClusterInformationReply)
	err := c.cc.Invoke(ctx, "/cmassh.Cluster/GetUpgradeClusterInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) UpgradeCluster(ctx context.Context, in *UpgradeClusterMsg, opts ...grpc.CallOption) (*UpgradeClusterReply, error) {
	out := new(UpgradeClusterReply)
	err := c.cc.Invoke(ctx, "/cmassh.Cluster/UpgradeCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	// Will provision a cluster
	CreateCluster(context.Context, *CreateClusterMsg) (*CreateClusterReply, error)
	// Will retrieve the status of a cluster and its kubeconfig for connectivity
	GetCluster(context.Context, *GetClusterMsg) (*GetClusterReply, error)
	// Will delete a cluster
	DeleteCluster(context.Context, *DeleteClusterMsg) (*DeleteClusterReply, error)
	// Will retrieve a list of clusters
	GetClusterList(context.Context, *GetClusterListMsg) (*GetClusterListReply, error)
	// Will return version information about api server
	GetVersionInformation(context.Context, *GetVersionMsg) (*GetVersionReply, error)
	// Will adjust a provision a cluster
	AdjustClusterNodes(context.Context, *AdjustClusterMsg) (*AdjustClusterReply, error)
	// Will return upgrade options for a given cluster
	GetUpgradeClusterInformation(context.Context, *GetUpgradeClusterInformationMsg) (*GetUpgradeClusterInformationReply, error)
	// Will attempt to upgrade a cluster
	UpgradeCluster(context.Context, *UpgradeClusterMsg) (*UpgradeClusterReply, error)
}

// UnimplementedClusterServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (*UnimplementedClusterServer) CreateCluster(ctx context.Context, req *CreateClusterMsg) (*CreateClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (*UnimplementedClusterServer) GetCluster(ctx context.Context, req *GetClusterMsg) (*GetClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (*UnimplementedClusterServer) DeleteCluster(ctx context.Context, req *DeleteClusterMsg) (*DeleteClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (*UnimplementedClusterServer) GetClusterList(ctx context.Context, req *GetClusterListMsg) (*GetClusterListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterList not implemented")
}
func (*UnimplementedClusterServer) GetVersionInformation(ctx context.Context, req *GetVersionMsg) (*GetVersionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionInformation not implemented")
}
func (*UnimplementedClusterServer) AdjustClusterNodes(ctx context.Context, req *AdjustClusterMsg) (*AdjustClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustClusterNodes not implemented")
}
func (*UnimplementedClusterServer) GetUpgradeClusterInformation(ctx context.Context, req *GetUpgradeClusterInformationMsg) (*GetUpgradeClusterInformationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpgradeClusterInformation not implemented")
}
func (*UnimplementedClusterServer) UpgradeCluster(ctx context.Context, req *UpgradeClusterMsg) (*UpgradeClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCluster not implemented")
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmassh.Cluster/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).CreateCluster(ctx, req.(*CreateClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmassh.Cluster/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetCluster(ctx, req.(*GetClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmassh.Cluster/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteCluster(ctx, req.(*DeleteClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterListMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmassh.Cluster/GetClusterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetClusterList(ctx, req.(*GetClusterListMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetVersionInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetVersionInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmassh.Cluster/GetVersionInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetVersionInformation(ctx, req.(*GetVersionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_AdjustClusterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).AdjustClusterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmassh.Cluster/AdjustClusterNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).AdjustClusterNodes(ctx, req.(*AdjustClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetUpgradeClusterInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpgradeClusterInformationMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetUpgradeClusterInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmassh.Cluster/GetUpgradeClusterInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetUpgradeClusterInformation(ctx, req.(*GetUpgradeClusterInformationMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_UpgradeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).UpgradeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmassh.Cluster/UpgradeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).UpgradeCluster(ctx, req.(*UpgradeClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cmassh.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _Cluster_CreateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Cluster_GetCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Cluster_DeleteCluster_Handler,
		},
		{
			MethodName: "GetClusterList",
			Handler:    _Cluster_GetClusterList_Handler,
		},
		{
			MethodName: "GetVersionInformation",
			Handler:    _Cluster_GetVersionInformation_Handler,
		},
		{
			MethodName: "AdjustClusterNodes",
			Handler:    _Cluster_AdjustClusterNodes_Handler,
		},
		{
			MethodName: "GetUpgradeClusterInformation",
			Handler:    _Cluster_GetUpgradeClusterInformation_Handler,
		},
		{
			MethodName: "UpgradeCluster",
			Handler:    _Cluster_UpgradeCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
