// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Api statically implements the virtual filesystem provided to vfsgen.
var Api = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.proto": &vfsgen۰CompressedFileInfo{
			name:             "api.proto",
			modTime:          time.Time{},
			uncompressedSize: 8313,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x73\x1b\xb7\x11\x7f\xe7\x5f\xb1\xc3\x97\xca\x1d\x9b\x27\xcb\x49\x9b\x91\xaa\xb6\x2a\xa5\x28\x1c\xcb\x94\x86\xa4\x9c\xc9\x13\x07\xc4\x2d\x8f\x88\xee\x00\x14\xc0\x91\xe6\x64\xf4\xbf\x77\xf0\x71\x47\xdc\x91\x47\x39\xfe\x98\x29\x1f\x12\x1d\xb0\xbb\xd8\xfd\xed\x62\x3f\xe0\x24\x81\xa1\x90\x5b\xc5\xb2\x95\x81\xb3\xd3\xb7\x3f\xc1\x94\x14\xba\xe4\x19\x4c\xaf\xa7\x30\xcc\x45\x99\xc2\x98\x18\xb6\x46\x18\x8a\x42\x96\x86\xf1\x0c\x66\x48\x0a\x20\xa5\x59\x09\xa5\x07\xbd\x24\xe9\x25\x09\xdc\x31\x8a\x5c\x63\x0a\x25\x4f\x51\x81\x59\x21\x5c\x49\x42\x57\x58\xed\xbc\x86\x8f\xa8\x34\x13\x1c\xce\x06\xa7\x70\x62\x09\xfa\x61\xab\xff\xea\xc2\x8a\xd8\x8a\x12\x0a\xb2\x05\x2e\x0c\x94\x1a\xc1\xac\x98\x86\x25\xcb\x11\xf0\x13\x45\x69\x80\x71\xa0\xa2\x90\x39\x23\x9c\x22\x6c\x98\x59\xb9\x73\x82\x14\xab\x09\xfc\x16\x64\x88\x85\x21\x8c\x03\x01\x2a\xe4\x16\xc4\x32\x26\x04\x62\x82\xd2\xf6\xb7\x32\x46\x9e\x27\xc9\x66\xb3\x19\x10\xa7\xf0\x40\xa8\x2c\xc9\x3d\xa9\x4e\xee\x46\xc3\x9b\xf1\xf4\xe6\xcd\xd9\xe0\x34\x30\x3d\xf2\x1c\xb5\x06\x85\xff\x2d\x99\xc2\x14\x16\x5b\x20\x52\xe6\x8c\x92\x45\x8e\x90\x93\x0d\x08\x05\x24\x53\x88\x29\x18\x61\x95\xde\x28\x66\x71\x7b\x0d\x5a\x2c\xcd\x86\x28\xb4\x62\x52\xa6\x8d\x62\x8b\xd2\x34\x30\xab\x54\x64\xba\x41\x20\x38\x10\x0e\xfd\xab\x29\x8c\xa6\x7d\xf8\xcf\xd5\x74\x34\x7d\x6d\x85\xfc\x3a\x9a\xfd\x72\xff\x38\x83\x5f\xaf\x26\x93\xab\xf1\x6c\x74\x33\x85\xfb\x09\x0c\xef\xc7\xd7\xa3\xd9\xe8\x7e\x3c\x85\xfb\x9f\xe1\x6a\xfc\x1b\xbc\x1f\x8d\xaf\x5f\x03\x32\xb3\x42\x05\xf8\x49\x2a\x6b\x81\x50\xc0\x2c\x9a\x98\x3a\xe8\xa6\x88\x0d\x15\x96\xc2\xab\xa4\x25\x52\xb6\x64\x14\x72\xc2\xb3\x92\x64\x08\x99\x58\xa3\xe2\x36\x12\x24\xaa\x82\x69\xeb\x55\x0d\x84\xa7\x56\x4c\xce\x0a\x66\x88\x71\x4b\x7b\x76\x0d\x7a\xee\xa4\x10\x62\xc3\xf1\x70\x06\xff\xd0\xfe\x6b\x40\x6d\xb0\x71\x17\x6b\xff\xce\x0a\xc2\xf2\x01\x15\xc5\x3f\x7b\x3d\xbd\xe5\x86\x7c\x82\x4b\xe8\x4b\x25\x8c\x78\xd7\xbf\xe8\xf5\x24\xa1\x4f\x56\x13\x5a\x10\xad\x57\x17\xbd\x1e\x2b\xa4\x50\x06\xfa\x99\x10\x59\x8e\x09\x91\x2c\x21\x9c\x8b\xa0\xc8\xc0\x71\xf6\x2f\x6a\x32\xf7\x4d\xdf\x64\xc8\xdf\xe8\x0d\xc9\x32\x54\x89\x90\x8e\xf4\x20\x5b\xaf\xe7\x77\xe1\x24\x53\x92\x0e\x32\x62\x70\x43\xb6\x7e\x9b\xce\x33\xe4\xf3\x20\x65\x10\xa4\x0c\x84\x44\x4e\x24\x5b\x9f\x55\x3b\xaf\xe0\x12\xfe\xe8\x01\x30\xbe\x14\xe7\xee\x2f\x00\xc3\x4c\x8e\xe7\xd0\x1f\xe6\xa5\x36\xa8\xe0\x03\xe1\x24\x43\x05\x57\x0f\x23\x98\x4e\x7f\x01\xa9\xc4\x9a\xa5\xa8\xfa\x17\x8e\x7c\xed\xef\xcf\x39\xf4\xd7\xa7\x83\xb7\x83\xd3\xb0\x4c\x05\x37\x84\x9a\x4a\xa8\xfd\x71\x52\x58\xb9\x31\xce\x81\xd8\xfe\x4a\x95\x9f\x43\xdf\xc6\xbd\x3e\x4f\x92\x8c\x99\x55\xb9\xb0\x58\x27\xc1\x13\x6f\x28\xa7\x26\xa1\x05\x79\xa3\xf5\x2a\xe2\x43\xeb\x94\x73\xe8\x1f\x75\x58\xa0\x7f\xb6\xff\x73\xff\xc1\x4f\x06\x15\x27\xf9\x3c\x15\x54\x57\x4a\x7e\x89\x0a\x29\x6a\xaa\x98\xc3\xf7\x1c\xfa\x1f\x84\x42\x20\x0b\x51\x1a\xf8\x2c\xf8\x9e\x7b\x00\x9a\xae\xb0\x40\x7d\x0e\xbf\xcc\x66\x0f\xd3\x8b\xf6\x8a\x5d\xa0\x82\xeb\xd2\xad\xf4\xc3\xa5\xb6\xe7\x25\xbf\x6b\xc1\x9d\x18\xa9\x44\x5a\xd2\xae\xfd\xe7\x8b\x5e\x4f\xa3\x5a\x33\x8a\xb5\x56\xde\x60\x7b\x57\x59\x9e\x7b\x9d\x5c\x16\x24\x40\x3d\x85\xdb\x57\x92\xc2\x50\x21\x31\x58\xf1\x9d\x34\x3e\x3f\xe8\xec\x15\x28\x34\xa5\xe2\xba\xb5\x35\x41\x99\x6f\x5f\x45\xde\xaf\x63\xd5\xdd\x85\x01\x91\x6c\x60\x91\xae\x22\x70\xf7\x93\x42\x1b\x38\x87\xbe\xbb\x2e\xeb\xb7\x49\x50\xa8\xdf\x20\x5a\x88\x74\x6b\x89\xfe\xba\x5b\x7e\x0e\x3e\x6e\x58\xa6\xd0\x28\x86\x6b\x9f\x43\xb4\x21\xa6\xd4\x36\xef\xd6\x66\xda\xfc\x00\xcc\x68\x78\x2a\x17\x48\x05\x5f\xb2\xcc\xa5\x18\x2a\x38\x47\x6a\xd8\x9a\x99\x6d\x0d\xc5\x2d\x9a\x1a\x87\xdd\xdf\x4d\x10\x76\xeb\x5f\x8e\x40\x86\xc7\x01\x38\x68\x69\x8a\x39\x1a\x3c\xe0\xc0\x6b\xb7\x51\x2b\xde\xf8\x6c\xea\xde\xd8\xfa\x72\xf5\x83\x26\x7f\xda\x82\xda\x57\x04\x72\xa6\x8d\xf5\x53\x60\xd4\x07\x5c\x70\x67\x49\x4e\x9a\xdf\x5d\xae\xb0\x7b\xdf\xda\x1d\x89\xd5\xf1\x65\x8b\x4a\xc5\xab\x14\xe9\xb2\xac\x2a\xdc\xdd\x0c\x49\x82\x48\x06\xf6\x6a\x46\xee\xba\x45\x13\x5a\x92\x51\x44\x7e\xb2\x5b\xde\x33\x32\xac\x7f\x33\x03\x83\xba\x2f\xd8\x46\xd2\xdf\x4b\x6d\x80\x1c\x4d\x1e\x57\x8e\x28\x78\x61\x2c\x52\xd4\x70\xd2\x58\x6b\x1a\xd3\xd8\xfa\x8a\x0c\x52\x7e\xd3\x04\x62\x5d\x58\xca\x4c\x91\x14\x83\x0e\xda\xe5\x08\x02\x19\x5b\x23\xdf\x33\xfa\x16\xcd\xa3\x27\x0f\x96\xb4\x1d\xd9\xb9\xbb\xe7\xda\x4e\xca\x6f\x1e\xcd\xc1\xc0\x97\x9c\x6e\x0c\x16\xd2\xd8\x0e\xb2\x42\x64\xdf\xe9\x4d\xa5\xe1\xa4\xf9\xdd\xb4\xb1\xb9\xf7\xad\x5d\xbe\x6f\xd5\x4b\xae\x7f\xee\xf5\x90\x97\x45\x55\x27\xa7\xbe\x62\xd4\xd5\x72\x2c\x0c\x68\x34\xee\x73\x3a\xbb\x9a\x3d\x4e\xe7\x8f\xe3\xe9\xc3\xcd\x70\xf4\xf3\xe8\xe6\x1a\x2e\xe1\xf4\xa2\x22\x9d\xad\x10\x1e\x26\xf7\x1f\x47\xd3\xd1\xfd\x78\x34\xbe\x75\xd5\x07\x81\xf1\xd4\x96\x67\xd4\xae\x22\x55\x55\x88\x69\x58\xa0\x6d\x5d\xa9\xab\xa1\xe9\xc0\x49\x69\xb0\x5f\xc2\xdb\x86\xec\xc9\xe3\xf8\x45\xb1\x2b\x62\xe5\xda\x10\xf5\x62\x7d\xb5\xd3\xb0\x2c\xf3\x7c\x0b\xa5\xb6\xb3\x81\x3f\xaa\x92\x76\x09\x67\xcd\x53\x6e\x86\xf7\xe3\xe1\xe8\xee\xf0\x49\xc4\x80\x16\x05\xc2\x46\xa8\x27\x2b\x97\xd8\x8a\x89\xf9\x36\x18\x93\x0a\x8e\x76\x48\x88\x54\x7a\x0d\xba\xa4\x2b\x20\x3a\xc4\x8f\x25\xb3\xdb\x05\x71\x0a\x0b\x05\x5c\xa4\x58\x8f\x24\x41\xb9\x48\x89\x4b\x78\xd7\x50\x70\x3a\xbb\x7f\x78\xf8\x6c\x78\x7d\x69\x4a\x83\xff\x02\xe7\x25\xfc\xd0\x10\x79\x33\x99\xdc\x4f\x8e\xca\xb3\xb3\xdc\x02\xa1\xe4\x1e\x42\xc7\xec\xb9\x2e\xe1\xc7\x86\xac\xeb\x9b\xdb\xc9\xd5\xf5\xcd\xf5\x51\x71\x61\x68\xd3\x76\xbe\x54\x0e\x44\x0b\x9a\x00\x85\xda\xd8\x86\xd2\xba\x0b\x96\x25\x77\x1b\x24\xaf\x5a\x92\x5a\xf6\x25\xfc\xed\xc2\x46\x6e\x81\x5a\xdb\xf9\xa3\xdd\xa3\x45\xf1\x4b\x0a\xac\xe6\xce\xea\x74\x23\xac\x2d\x75\x16\x0f\xe8\xd8\x29\x8f\x67\xae\x67\xdf\x0b\xbd\xaa\x9e\x89\x25\xbc\x2f\x17\xa8\x38\x5a\x8b\x6c\x4a\xb4\x81\x80\xde\x87\x7a\x00\x43\xc1\x8d\x12\x39\xc8\x9c\xf0\x9a\x4b\x03\x51\x08\x29\x1a\x3b\xa4\x71\x3f\xa9\x5a\x75\x3e\x10\xba\x62\x1c\xa7\x12\xe9\x20\xd6\xe0\xe9\x27\x3d\xaf\x0e\x8c\xa3\x33\xd0\x6b\xd8\xac\x18\x5d\xb9\x11\x5c\x31\x8d\x0d\xd3\x68\xac\x80\x63\x0c\x2a\x3d\xd8\x85\xe8\xc4\x8a\x72\xee\x28\xe7\x4e\xff\x46\xa8\x7d\xc6\x69\x3e\xff\xa1\xf4\x37\x2d\x16\xee\x51\x71\x52\xe7\x52\x88\x5c\xfb\x90\xeb\xf2\x98\xcb\x82\x51\x87\xbe\x42\x37\x20\xbb\xbb\x61\x1a\xf6\x6d\x88\x8e\x1d\xe7\xa1\x64\xfe\x15\x00\xb5\x4f\x53\x0b\x21\x72\x10\x4f\x7b\x4e\x4c\xd1\x10\x96\xeb\x76\x34\x04\x56\x1b\x7b\x52\x70\x1d\x50\x0b\xf5\xc7\x60\x51\x13\x3a\x5f\x44\x26\x34\x1a\xe2\xcf\x89\xb8\x5c\x88\x27\x4c\xa1\x94\x87\xe3\xed\xa0\xe8\x16\x34\xa3\xd6\x35\xf7\xa9\x46\x6f\xb5\xc1\x62\xdf\xf8\xd8\x94\x6b\x67\xfd\x51\x83\xda\x8d\x72\xec\x11\x62\x6c\x4e\x89\xce\xfe\x8b\xf6\xaa\x1b\x61\x27\x42\xa3\xc4\xf6\x45\xab\xf6\xbb\xed\xdd\x09\x43\x51\xe6\x69\xc3\xb6\x05\x56\x82\xc3\x05\x3d\xe4\xd7\x69\x3d\xe0\x58\xd6\x38\x0a\x82\x22\x61\x02\xea\xf6\x5d\xe8\xa2\xe1\x8f\xee\xed\xaf\xf2\x41\x60\xba\x3b\xd8\xdf\x57\x77\xe7\x40\xb8\xed\xeb\x1c\x13\x1d\x8b\xb6\xa3\xd9\xec\x2a\x4d\x99\x4f\xaa\x07\x9a\xf3\xe6\xc8\xd8\x21\xd2\x13\xcc\x2b\xad\xda\xf5\xb3\x9b\xbf\xd9\x61\xd4\x8e\x79\x77\xc8\xc8\x28\x5a\xff\x3f\x4d\x8d\x6f\x44\x34\x49\x1b\x51\x0d\xd2\xf6\xcf\x0e\xb1\x11\x7d\xbb\xb8\xff\x69\xf4\x9a\x59\x75\x57\x9c\xee\xc8\x02\xf3\x1d\x76\x56\x36\x0f\xf8\x11\xc8\xed\xe6\xcb\x45\x8f\xe4\x65\x17\x83\xdf\xab\x22\xb4\x52\x3e\xbc\x50\x7a\x9c\xfd\xc0\xa0\xd1\x87\x7d\xa3\x30\x16\xa1\xb6\xec\xbc\xde\x51\xa4\x1a\xfa\x3b\x25\x74\xfd\x1e\xda\x21\xb2\x71\xaf\xda\x78\x04\x11\x0d\x4b\xb7\xd2\x19\x59\x09\xb0\x7e\xdb\x0d\x78\x27\xda\x10\x9e\x12\x95\xda\x62\x94\xc9\xf2\x55\x0c\x02\xe3\x76\x97\xa2\x13\xd1\xbe\x07\xbc\x2c\x16\xb6\x86\x2d\x9b\xaa\x05\x56\x2a\x4a\x6e\xea\xe0\x7f\x19\xbf\x3d\xc4\x3a\x51\xe2\xd1\x2d\x09\x5c\x75\x03\x7f\xcc\xdb\x2d\x74\xdb\xac\x2f\x43\x7a\xf6\x1d\x20\x7d\xf7\x05\x90\xfe\x50\x41\x7a\x8b\x26\x6e\xdc\xdc\x73\xa4\x7f\x79\x88\xd2\xfc\xee\x89\xc1\x57\x80\x24\x01\x9f\xee\x2d\x10\x15\x77\x55\x57\xf6\xf9\xda\xa5\x61\x09\x42\xa2\xf2\x0e\xb4\xbd\xca\xfd\xfb\x8e\xaa\x5c\x89\x3a\xf0\xf2\xb1\x9b\xf3\x82\xdd\x86\x64\xd5\x50\x91\x31\xdb\xa8\x48\xa1\x99\x11\x6a\x5b\x13\x06\x08\x32\x66\xa2\xce\xf1\xed\x45\x5b\xd0\x8a\xe8\x55\x15\x1b\x56\x12\x15\x45\xc1\xcc\x21\x29\x7e\x67\xe7\xd5\xee\xce\xcc\x28\x44\x67\x2a\xcd\x91\x70\xd8\xac\x90\xc3\xa2\x64\xf9\x41\xb1\x96\x78\xee\x07\x83\xda\xb9\x41\xf4\xb5\x5d\x14\x4b\xc7\x9b\xb6\x79\xdd\xe2\x3c\xf5\x7c\x3f\x34\xf8\x3e\xee\x3c\x9c\x09\x3b\x4f\xa4\x3e\x09\x17\x92\x85\x39\x25\xd6\x41\x44\xf8\xfc\xd8\x90\x33\xf4\x1c\xca\x89\x68\xf3\xd1\x6a\xd3\x0d\x1e\x11\xd7\x43\x4e\x8c\xf5\x1c\x30\xe3\x41\xf0\x84\xa9\x0b\x9f\x04\x54\xc9\xdd\xbf\xcf\x08\xde\x96\x28\x2b\xc6\x4b\xf8\x7b\x35\x8a\xf7\x5a\x26\x45\x41\xe1\xb6\x0e\xc4\x4a\xb0\x66\x1e\x17\xb8\x03\xbd\xce\xb1\xf7\x97\xa3\x5d\x9e\x1f\x79\x37\xe8\x46\x18\x2a\xb8\x66\x29\x3a\xfd\xad\x7d\xe1\xad\xe1\x73\xba\xd9\xe3\xcf\x3a\x51\x1b\x48\x78\xbb\x09\x0c\xa7\x74\xf7\x80\x4e\xed\xc6\xac\x25\x85\xd6\x6c\x91\x23\xf8\x7f\x4f\xe5\x62\xd3\xcc\x61\x55\x11\xab\x78\xda\x88\xed\xbd\xdf\x7c\x27\x8c\x0e\x18\xe0\x84\x6c\x30\x7e\x2c\x10\xff\x6a\x54\xde\x78\x32\xec\xd4\xb9\x3d\x51\x11\xed\xe7\x24\x02\xba\xa4\x14\xb5\x5e\x96\x79\xf7\xd0\x14\x89\x6d\xbf\x5d\x7e\x5f\x24\x5a\x43\xe7\xc6\x66\x16\xee\x5a\x29\x92\xa6\x87\x3a\xaa\x83\xd3\x27\x49\xd3\x7a\xa0\xed\x1c\x9f\x23\xd9\x0a\x0b\xb1\x46\x58\x2a\x51\x74\x1f\x30\x71\x44\xf1\x31\x9e\x2d\x1e\x9d\x1b\x99\x7d\x9f\x61\x2f\xb1\x33\x19\x15\xb3\x76\x86\x60\x72\x07\xcd\x73\xa7\x4b\xbe\xd6\xd1\xff\x0b\x00\x00\xff\xff\x43\xde\xaa\x89\x79\x20\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.proto"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
