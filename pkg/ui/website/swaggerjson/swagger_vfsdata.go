// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Swagger statically implements the virtual filesystem provided to vfsgen.
var Swagger = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "api.swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 17205,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xdb\xc8\x11\x7f\xf7\x5f\x31\x60\x0b\xb4\x05\x12\x2b\x97\xbe\x14\x7e\x69\x0d\xd9\x97\x0a\x97\xc8\x86\xe5\x5c\x1e\xda\x40\x58\x91\x23\x72\x2f\xe4\x2e\x6f\x77\x29\x57\x28\xf2\xbf\x1f\xf6\x83\xe2\x92\x22\x29\x4a\x76\x6c\xe9\x72\xf7\x72\x11\xb9\x3b\x3b\x1f\x3f\xce\xce\x57\xf2\xff\x33\x80\x40\x3e\x90\x38\x46\x11\x5c\x40\xf0\xf6\xfc\x4d\xf0\x4a\x3f\xa3\x6c\xc9\x83\x0b\xd0\xef\x01\x02\x45\x55\x8a\xfa\xfd\x38\x2d\xa4\x42\x01\x1f\x08\x23\x31\x0a\xb8\xbc\x9d\xc0\x6c\xf6\x6f\xc8\x05\x5f\xd1\x08\x85\xd9\x0c\x10\xac\x50\x48\xca\x99\xde\xb2\x7a\x73\xfe\x83\xa3\x0a\x10\x84\x9c\x29\x12\xaa\x0d\x69\x80\x80\x91\xcc\xd0\x9e\x91\x4c\x16\x2c\x86\xf1\x74\x7c\xef\x96\x03\x04\x85\x48\xf5\xcb\x44\xa9\x5c\x5e\x8c\x46\x31\x55\x49\xb1\x38\x0f\x79\x36\x92\x76\xfd\xeb\x90\x85\x6a\x14\x66\xe4\xb5\x94\x49\xb5\x0f\x33\x42\xcd\x4e\xb7\xec\x3c\x4c\x79\x11\x31\xa2\xe8\x0a\xff\x15\xeb\x97\x9a\x48\x60\x96\x7f\x3d\x03\xf8\x6a\xc4\x96\x61\x82\x19\xca\xe0\x02\xfe\x63\xf9\x35\xe7\x96\xcc\xeb\x1f\x7a\xc7\x67\xb3\x36\xe4\x4c\x16\xb5\xc5\x24\xcf\x53\x1a\x12\x45\x39\x1b\xfd\x22\x39\xab\xd6\xe6\x82\x47\x45\x38\x70\x2d\x51\x89\xac\x74\x3f\x22\x39\x1d\xad\x7e\x18\x85\x56\xf5\xbe\xe6\x62\xf4\x15\xa9\xd9\x2f\xb2\x8c\x88\xb5\x16\xfb\x13\x4d\x53\x10\xa8\x04\xc5\x15\x82\x4a\x10\xa4\x22\xaa\x90\xc0\x97\x40\xc0\x11\x03\xc2\x22\xa0\x4a\xc2\x97\x62\x81\x21\x67\x4b\x1a\xc3\x92\x0b\x08\x39\x63\x18\x2a\xba\xa2\x6a\xbd\x51\x29\x40\xc0\x73\x14\x86\xe5\x49\xa4\xcf\x78\x87\xca\x01\xc2\x5f\x24\x50\xe6\x9c\x49\x94\x35\xde\x00\x82\xb7\x6f\xde\x34\x1e\x01\x04\x11\xca\x50\xd0\x5c\x39\xb4\x5c\x82\x2c\xc2\x10\xa5\x5c\x16\x9a\x7d\x4b\xe9\xdc\x23\x6f\xe5\xd4\x66\x22\x5b\xc4\x00\x82\x3f\x0b\x5c\x6a\x3a\x7f\x1a\x45\xb8\xa4\x8c\x6a\xba\x52\xa3\x43\xca\xa4\x62\xf7\x0e\xf3\x74\x1d\xd4\xf6\x7e\x3d\x6b\xfb\xf3\x57\x4f\xae\x9c\x08\x92\xa1\x42\x51\x59\xd1\xfe\xd7\x90\xa8\xc4\xb3\xf9\xff\xab\x5e\x69\xa7\x24\x43\x6d\x10\x6d\x9e\xd2\x24\x8a\xc3\x02\x21\xe5\xfc\x0b\x46\x50\xe4\x5b\xb2\x53\xb3\xf3\xd7\x02\xc5\xba\xf9\x4a\xe0\xaf\x05\x15\xa8\x6d\xb3\x24\xa9\xc4\xc6\x6b\xb5\xce\x0d\x63\x52\x09\xca\xe2\xa0\x55\xe0\xcf\x9e\xc0\x8a\xc4\x4d\x51\x4b\x07\x50\x6d\xfe\x7c\xd6\xd0\x54\x10\x61\x8a\x0a\xfb\x81\x69\xd7\x54\x40\xec\x01\xd9\x95\x59\x7a\x4a\x38\xab\x71\x7c\x2c\x50\xfb\x94\x10\x05\x54\xfa\x50\xfb\x8b\x04\xbd\x51\x23\x2e\x42\xa9\x04\x5f\x9f\x1e\xd8\x72\x2e\x77\xf8\x40\x73\x35\xe9\xcb\x68\x10\xda\xc6\x02\xc9\x69\xa1\xad\xc6\xf1\xb3\xa0\x6d\xc1\xa3\x2d\x34\x58\xa0\xb4\xbd\xf1\x70\xa2\x44\xd1\x84\xc9\x13\xc8\xfc\x41\xc6\x43\x24\x3e\x1c\x6c\x67\x9e\xc2\x9a\xd7\xf1\x28\xa5\x35\x00\xee\x71\x27\x13\xd0\x7b\xb5\xfb\x77\xb4\xe4\xa0\xab\xf6\xbd\x3e\xf0\x14\x80\x59\x67\xf9\x20\x64\x3e\xa1\x9d\x72\xce\x53\xdf\x4e\x7b\xdd\x52\x8c\x47\x08\x9a\x02\x2c\x05\xcf\x80\x54\x4e\x05\xa3\xc1\x57\xd8\x94\x47\x78\xab\xb9\x38\x05\xe3\xd5\x59\x7e\x16\xb7\xe2\xf4\x38\x3d\xe8\x2e\xb3\x97\x98\x31\xd7\xc6\x58\xf2\x79\xae\xb3\x57\x03\xee\x67\x1e\xe1\x5c\xb3\x34\xd7\x4f\xe4\x1e\xe2\x55\xc8\x33\x3b\x2b\x31\xbf\x81\x6c\x44\x08\xb2\xed\xd8\x15\x66\x4d\x74\xee\xd0\x48\x43\x27\x26\x55\x4a\x53\x9d\x4f\x70\xf6\x23\x17\x19\xd1\x1e\x32\xc8\x8a\x54\xd1\x17\x8c\x0b\x48\x14\x79\xda\x55\x7c\xef\xaf\xfa\x32\x8a\x4e\xea\x93\xf6\xf8\xfd\x4e\xc2\x04\x4f\xe2\x6f\x1e\x24\x54\xc8\x2b\x76\x00\x4f\x86\x24\xb5\x19\x39\x2b\xb2\x05\x0a\x1d\x01\x64\x24\x4c\x28\x43\x09\x94\xd5\xaf\x1b\x2e\xf6\xc6\xe5\x4c\xd3\x3f\x29\x64\xd6\x38\xfe\x4e\xb0\x59\x93\xf9\x65\x43\xd8\x22\x8f\x05\x89\x70\xdf\x28\xb6\x10\x0c\xdc\x56\xe0\x06\x27\xd2\xe1\x35\xa6\x2b\x64\x03\x90\xfa\x0e\xd5\x47\x4b\xc0\x71\x3e\x61\x4b\x73\x3f\x68\xcc\x9d\x02\x70\xfb\x04\x38\xe2\xc4\x1f\x94\x7e\xf6\x80\x40\x04\x42\xc8\x99\xa4\x11\xea\x4b\xdc\x98\xcf\x99\xf4\x04\x4b\x01\xbb\x1c\x2f\x51\x0a\xb3\x5c\xe9\xbb\xbe\xc4\xed\x90\x92\x40\xdd\xc2\x27\x81\xcb\x3a\xcb\xdf\x89\x47\xad\x0b\xfd\x32\x2e\xb5\xea\x7b\xec\xed\x4a\xdd\x56\xa0\x95\x0b\x01\xb2\xe0\x85\x02\x92\x53\x90\x28\x56\xbb\x7c\xe9\xcf\x96\xc2\x09\x3a\x51\xc7\xf9\xb3\xd5\x08\x36\xfd\x1e\x8f\x9b\xaa\xe3\xd2\x60\xa8\x45\xad\x9e\x79\x4b\xe7\xc6\x17\xbf\x60\x58\x15\x66\x82\x5c\x68\x03\x29\xda\xd0\x77\x10\x53\x35\xdf\x46\x09\xb4\xf8\xc9\x57\xb5\x77\x65\x07\xee\x3e\x41\x50\x24\x06\xce\x8c\x47\x8f\xa9\x02\x81\x39\x97\x54\x71\xe1\xe9\xce\xd7\x90\x3e\x32\xe4\x59\x46\xd5\xc1\x27\x26\x44\x26\x65\xa3\x42\x1f\xe9\xc8\x75\x1e\xa7\x04\xe2\x5c\x2a\xd2\xa8\xb0\x0c\x3d\xf2\x53\x82\x2a\xd1\x91\xb1\x00\xc6\x95\x39\x55\x53\x84\x07\x22\x21\x4c\x91\x30\x78\x48\x90\xc1\xa2\xa0\x69\x07\x13\xfa\x55\x34\x8f\x0e\x65\xe0\x8a\x28\xd3\x98\x31\x64\x3a\xc4\xe4\x8f\xb2\xa3\x43\x95\x3e\x24\xe6\x50\x48\x8c\xf4\xbd\x14\xf2\x2c\xa7\x29\xb6\x9f\xe8\x5e\x8a\x83\xce\x1b\xbb\xcd\xe6\xa8\x76\xfa\x79\x4a\x94\xc6\xf8\x41\xf4\x6f\xdd\x66\xa0\xca\x9a\xc9\x9e\x17\x99\x98\x62\x04\xa2\x60\x4c\x47\x18\xb6\xd1\xe9\xce\x6e\x75\xa5\xad\xa9\xdb\x23\x3e\x38\xbf\xac\x74\x18\x16\x5b\x8b\x4d\xb5\xf2\x81\x04\xc5\xdb\x75\xfa\xc0\xc5\x17\x14\xf3\x4d\x01\x68\xcb\xfb\x76\x17\x5f\x3a\x4a\x2f\xbd\xbe\xf4\x83\xcd\x23\x67\x39\x86\x9d\x35\xaa\x86\x68\x1f\xca\xd4\xd3\x09\xa5\xb8\x2f\xea\xde\xd6\xb2\x3e\xfc\x11\xf6\xe2\x5f\xba\x54\xb4\xe0\x5c\x7f\xfb\x75\x25\x2d\x37\x05\xa5\xd6\xd7\x7d\x2e\xa5\x4a\xb3\x35\x60\xfd\x24\x7b\xb1\x06\x95\x50\x09\x3a\x4c\x41\xa9\x86\x29\xc1\x5d\x3a\x57\xa8\x08\x4d\x27\x0a\xb3\xc7\x68\x81\x1d\x0a\xd7\x96\x96\x72\x3b\x32\xed\x38\xc0\x3c\x43\x29\x49\x7c\xd8\x59\x97\x51\x64\xd0\x47\xd2\x96\xa8\xa5\x3e\x72\xb0\x93\x9d\x6a\x02\xe1\xd1\x5f\xa9\x37\xcc\x60\x5c\xaa\x99\x65\xe8\xc6\xf5\x96\x4e\x9a\x0c\xf4\x76\xa2\x2c\xb9\x99\xdd\xd8\x7d\x81\xee\xd2\xc4\x6e\x5c\xfd\x81\xa8\x3d\x11\x75\xcc\xc6\x9c\x35\x79\xeb\x52\x4f\x80\xac\xc8\x6a\xe1\x6d\x30\xbb\xbf\xbc\xff\x38\x9b\x7f\x9c\xce\x6e\xaf\xc7\x93\x1f\x27\xd7\x57\x7e\x98\x7f\x7b\x77\xf3\xf3\x64\x36\xb9\x99\x4e\xa6\xef\xfc\xe7\x77\x1f\xa7\x5b\x8f\xae\xc7\x37\xd3\xf1\xe4\x7d\xe3\xf1\xec\xfe\xe6\xf6\xb6\xf1\xec\xfa\xee\xee\xe6\xce\x7f\x70\x75\xfd\xee\xee\xf2\xea\xfa\xaa\x94\x7a\x93\x47\xe9\x90\x9a\x14\xa9\xf1\xc8\x3d\x9c\x56\x0a\x7d\x0d\xdb\xcb\x2e\x60\xca\x15\x48\x54\xff\x65\xf0\x1a\x7c\x91\x2e\x40\x1b\xc0\x7f\x62\xac\x81\x40\x59\x44\x43\xa2\xb0\x7e\x51\x53\x09\x0b\xd4\x71\x47\x68\x3a\xc6\xd1\xb9\x21\xe8\x74\x61\x69\xb9\x1f\xbd\x64\x12\xa2\xe9\x20\x2b\xc9\xd8\xb9\x29\x09\xcb\x22\x4d\xd7\x50\x48\xb2\x48\xd1\x91\xae\x74\xea\xc8\x57\x0f\x5a\x8e\x20\x0a\x24\xcf\x10\x74\x98\xa0\x09\x92\x50\xd1\x15\xa6\x6b\xc7\x75\xc4\x19\x96\x91\xbe\xe3\xe5\x95\xce\xc4\x12\x20\xd2\xd5\x30\xf4\x32\xfd\x3a\x23\x86\x53\x73\xbd\x45\x08\x92\x2f\xd5\x03\x11\x8e\xab\xd2\xa4\x96\xa5\xf2\xd7\x30\xcd\xd9\x76\x53\x64\xe8\x18\x18\x58\x22\xe6\x8f\xbd\x14\x32\xa2\xc5\x80\x82\x59\xfd\x18\x02\x25\x6c\x2c\x8d\xf2\x57\x2f\x19\x57\x2a\x90\x3a\x70\x15\x46\x41\x5a\x21\x5c\x67\xa1\x8a\x0b\x34\x36\x80\x65\xc1\x42\xeb\x37\xa8\x72\x59\x50\xe3\xbb\xe3\x4c\x09\x9e\xde\xa6\x84\xa1\x1f\x24\x3d\xc2\xa1\xa6\x64\x81\xdf\x3a\x9e\xfb\xa9\x58\xa0\x60\xa8\x50\xbe\xd7\xa7\x0d\x88\xe9\xb4\x5e\x2d\x67\x26\xf2\x36\x9a\xb4\xb2\x43\xae\x85\xdf\xb4\x1a\xda\x9d\x26\x65\x52\x11\x16\xe2\xbd\x15\xe3\x80\x6c\x71\x9d\x63\xad\xa3\xa1\xb8\x37\x82\xf3\x57\x4d\x3d\x22\x22\xd2\x40\x8d\xf3\xe2\x6f\x5d\x99\x4e\xc1\x3a\x93\x55\xca\x14\xc6\xb5\x5a\x48\x2d\x0c\xa4\x4c\xfd\xfd\x6d\x8f\xf3\xde\x6e\xba\xb4\x78\xee\x6d\x37\x65\xfc\x7e\x8e\x21\x5d\xba\xa9\x4d\x57\xeb\x96\x68\x47\x38\x7a\x74\xdc\x40\x62\x73\x76\xe5\x48\xee\x74\x37\x78\xe8\x85\xc1\x1d\x81\xda\x3f\xe4\x21\x89\x6f\xa3\xa0\xa4\xd5\xb9\xaa\x52\xe0\x0a\xe7\x46\xad\x36\x6b\x32\x9e\x4c\x9e\xc3\xb8\xa6\x5b\xb7\x4b\x9a\xe2\x75\x84\x0a\x45\x46\x37\x31\x3b\x82\xf7\x71\x9f\x77\x81\xcb\x90\x9b\x1b\x72\x26\x33\xdb\x2f\x48\xe8\xf0\x24\xed\x8a\xde\x64\x57\x0f\x09\x0d\x13\x93\x15\x0b\x2a\xb1\xa6\xf8\x1a\x76\x4e\x30\x8d\x1c\x20\xe3\xc0\xe0\x68\x7b\x94\xed\x24\x12\xc9\xd2\x90\xc3\xd3\x48\x1f\x8e\x5b\x73\xdd\xbb\x21\xe8\x65\x04\xdd\x8e\x2e\x32\x89\x68\x33\x4c\x2d\x99\xd9\x54\x71\x87\x99\xa6\x65\xa6\xf5\xf8\x4c\x33\xe6\x45\x1a\xd5\x84\x5d\x60\x39\xda\xda\xe5\xce\xda\xb3\x84\x41\x4e\x74\x56\x4b\x03\xf6\xaa\x15\xb4\x8d\x57\x1d\x9f\x3e\x3f\x11\x69\x01\x4c\xea\xe5\xff\x3d\x04\x6d\x1b\x02\x3c\x3e\x41\x27\x8d\xd8\xd7\x46\xdc\x72\x2d\xf5\x17\xd6\xf7\xd5\x7e\x63\x3f\xec\x7f\xe8\xbb\xfd\xf0\xfb\xe6\x38\xe9\x9e\x16\xfa\xdd\x59\xe7\x00\x9f\xea\x55\xef\x86\x6a\x6f\xc7\x04\xc0\xf1\xe9\x73\x4c\x58\xd3\x49\xba\x7e\x78\x87\x8f\x2c\x43\xae\xc7\x83\x7d\xe0\x18\x65\xa3\xae\x57\x0b\xf9\x72\x2e\x25\x5d\xa4\x08\x82\xc6\x89\x02\xc6\x1f\x06\x5b\xaa\xd6\x66\x3c\x3e\xbb\x4c\x96\xb0\x69\xea\x9a\x58\xe2\xe6\xa7\x5e\x7b\xcc\x69\x6b\x4b\x12\xba\xa1\xbe\xbb\xb3\xd9\xdf\xac\xf2\x57\x0e\x49\x9a\xcc\x29\x26\xa2\x2f\x63\xfd\xda\xe5\x51\x37\x50\x33\xd7\x7d\x89\xbc\xc8\x24\x88\x2e\x37\x22\x36\x8f\xee\x30\x01\x49\x8b\xc3\x8f\x30\xbb\xdb\xcf\xe8\x41\xf0\x13\xd5\x2d\x9e\x44\x39\xb6\xe4\x64\xf8\xd1\x29\x70\xbb\x92\x4e\xa6\x42\xb2\x53\x92\x3f\xca\x22\x70\x50\x59\xa4\xaf\x10\xb2\x35\x01\x79\x24\x4d\x5e\xd6\x5e\x1b\xb1\x63\xbb\xde\x70\x6e\xbb\x8d\x9e\x2b\x45\xaf\x69\x6f\x9f\x7e\x6f\xad\x69\x6d\xa5\x1a\xe6\x7e\x5a\xa6\x74\x8f\xef\x0e\x7d\x82\x94\x65\x5b\xb3\x2f\xe1\x6c\xbb\xff\x12\x48\x9b\xd9\x9e\xc1\x49\x4c\xb7\x87\xd5\xf7\xc3\xcf\xf6\x7c\xde\x4b\xeb\x75\x8f\x71\xd8\xde\x40\xec\x70\x46\xca\xb0\x48\x9f\xfc\x80\x7e\x4b\x87\xff\xf3\x10\xad\xfe\xbe\x3e\xcb\xcd\x98\x1e\xfe\x4f\xa1\x60\x24\xbd\xe2\xa1\x37\xa7\xd7\x28\x29\x7f\xe0\x02\x5d\xa7\x78\xe8\x3f\x53\xb1\xe7\x3f\x2e\xa1\xf9\x39\xfb\x7a\xf6\x5b\x00\x00\x00\xff\xff\x1c\xdf\x1c\x9c\x35\x43\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
