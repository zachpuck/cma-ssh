// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package api

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Api statically implements the virtual filesystem provided to vfsgen.
var Api = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.proto": &vfsgen۰CompressedFileInfo{
			name:             "api.proto",
			modTime:          time.Time{},
			uncompressedSize: 9354,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdf\x6f\xdb\x38\xf2\x7f\xf7\x5f\x31\xf0\xcb\x37\xfd\xa2\xb5\xd2\x74\xf7\x6e\x91\x5c\xee\x2e\xe7\x64\x53\xa3\x89\x13\xc4\x4e\x17\xfb\x64\xd0\xd4\x58\xe6\x45\x22\x75\x24\x15\xd7\x58\xf4\x7f\x3f\xf0\x87\x6c\x52\x96\xec\xb4\xcd\x02\x97\x87\x36\x12\x67\x46\xf3\x99\x5f\x9c\x99\x24\x09\x0c\x45\xb9\x96\x2c\x5b\x6a\x38\x39\x7e\xff\x0b\x4c\x48\xa1\x2a\x9e\xc1\xe4\x72\x02\xc3\x5c\x54\x29\x8c\x89\x66\xcf\x08\x43\x51\x94\x95\x66\x3c\x83\x29\x92\x02\x48\xa5\x97\x42\xaa\x41\x2f\x49\x7a\x49\x02\x37\x8c\x22\x57\x98\x42\xc5\x53\x94\xa0\x97\x08\x17\x25\xa1\x4b\xac\x4f\xde\xc2\x67\x94\x8a\x09\x0e\x27\x83\x63\x38\x32\x04\x7d\x7f\xd4\x7f\x73\x66\x44\xac\x45\x05\x05\x59\x03\x17\x1a\x2a\x85\xa0\x97\x4c\xc1\x82\xe5\x08\xf8\x85\x62\xa9\x81\x71\xa0\xa2\x28\x73\x46\x38\x45\x58\x31\xbd\xb4\xdf\xf1\x52\x8c\x26\xf0\xbb\x97\x21\xe6\x9a\x30\x0e\x04\xa8\x28\xd7\x20\x16\x21\x21\x10\xed\x95\x36\x3f\x4b\xad\xcb\xd3\x24\x59\xad\x56\x03\x62\x15\x1e\x08\x99\x25\xb9\x23\x55\xc9\xcd\x68\x78\x35\x9e\x5c\xbd\x3b\x19\x1c\x7b\xa6\x47\x9e\xa3\x52\x20\xf1\x3f\x15\x93\x98\xc2\x7c\x0d\xa4\x2c\x73\x46\xc9\x3c\x47\xc8\xc9\x0a\x84\x04\x92\x49\xc4\x14\xb4\x30\x4a\xaf\x24\x33\x76\x7b\x0b\x4a\x2c\xf4\x8a\x48\x34\x62\x52\xa6\xb4\x64\xf3\x4a\x47\x36\xab\x55\x64\x2a\x22\x10\x1c\x08\x87\xfe\xc5\x04\x46\x93\x3e\xfc\xeb\x62\x32\x9a\xbc\x35\x42\x7e\x1b\x4d\x3f\xde\x3d\x4e\xe1\xb7\x8b\x87\x87\x8b\xf1\x74\x74\x35\x81\xbb\x07\x18\xde\x8d\x2f\x47\xd3\xd1\xdd\x78\x02\x77\xbf\xc2\xc5\xf8\x77\xf8\x34\x1a\x5f\xbe\x05\x64\x7a\x89\x12\xf0\x4b\x29\x0d\x02\x21\x81\x19\x6b\x62\x6a\x4d\x37\x41\x8c\x54\x58\x08\xa7\x92\x2a\x91\xb2\x05\xa3\x90\x13\x9e\x55\x24\x43\xc8\xc4\x33\x4a\x6e\x22\xa1\x44\x59\x30\x65\xbc\xaa\x80\xf0\xd4\x88\xc9\x59\xc1\x34\xd1\xf6\xd5\x0e\xae\x41\xcf\x7e\xc9\x87\xd8\x70\x3c\x9c\xc2\xdf\x94\x7b\x1a\x50\x13\x6c\xdc\xc6\xda\x3f\xb3\x82\xb0\x7c\x40\x45\xf1\xf7\x5e\x4f\xad\xb9\x26\x5f\xe0\x1c\xfa\xa5\x14\x5a\x7c\xe8\x9f\xf5\x7a\x25\xa1\x4f\x46\x13\x5a\x10\xa5\x96\x67\xbd\x1e\x2b\x4a\x21\x35\xf4\x33\x21\xb2\x1c\x13\x52\xb2\x84\x70\x2e\xbc\x22\x03\xcb\xd9\x3f\xdb\x90\xd9\x67\xfa\x2e\x43\xfe\x4e\xad\x48\x96\xa1\x4c\x44\x69\x49\x5b\xd9\x7a\x3d\x77\x0a\x47\x99\x2c\xe9\x20\x23\x1a\x57\x64\xed\x8e\xe9\x2c\x43\x3e\xf3\x52\x06\x5e\xca\x40\x94\xc8\x49\xc9\x9e\x4f\xea\x93\x37\x70\x0e\x7f\xf4\x00\x18\x5f\x88\x53\xfb\x1b\x80\x66\x3a\xc7\x53\xe8\x0f\xf3\x4a\x69\x94\x70\x4b\x38\xc9\x50\xc2\xc5\xfd\x08\x26\x93\x8f\x50\x4a\xf1\xcc\x52\x94\xfd\x33\x4b\xfe\xec\xf2\xe7\x14\xfa\xcf\xc7\x83\xf7\x83\x63\xff\x9a\x0a\xae\x09\xd5\xb5\x50\xf3\xc3\x49\x61\xe4\x86\x76\xf6\xc4\xe6\xa7\x92\xf9\x29\xf4\x4d\xdc\xab\xd3\x24\xc9\x98\x5e\x56\x73\x63\xeb\xc4\x7b\xe2\x1d\xe5\x54\x27\xb4\x20\xef\x94\x5a\x06\x7c\x68\x9c\x72\x0a\xfd\xbd\x0e\xf3\xf4\x5f\xcd\x7f\xf6\x1f\xfc\xa2\x51\x72\x92\xcf\x52\x41\x55\xad\xe4\xf7\xa8\x90\xa2\xa2\x92\x59\xfb\x9e\x42\xff\x56\x48\x04\x32\x17\x95\x86\x17\x99\xef\x6b\x0f\x40\xd1\x25\x16\xa8\x4e\xe1\xe3\x74\x7a\x3f\x39\x6b\xbe\x31\x2f\xa8\xe0\xaa\xb2\x6f\xfa\x3e\xa9\xcd\xf7\x92\x7f\x2b\xc1\xad\x98\x52\x8a\xb4\xa2\x5d\xe7\x5f\xcf\x7a\x3d\x85\xf2\x99\x51\xdc\x68\xe5\x00\x9b\x5c\x65\x79\xee\x74\xb2\x55\x90\x00\x75\x14\xf6\x5c\x96\x14\x86\x12\x89\xc6\x9a\xef\x28\x7a\xbc\x55\xd9\x1b\x90\xa8\x2b\xc9\x55\xe3\xe8\x01\xcb\x7c\xfd\x26\xf0\xfe\x26\x56\x6d\x2e\x0c\x48\xc9\x06\xc6\xd2\x75\x04\x6e\x7f\x4a\xa1\x34\x9c\x42\xdf\xa6\xcb\xf3\xfb\xc4\x2b\xd4\x8f\x88\xe6\x22\x5d\x1b\xa2\xff\xdf\xbe\xfe\xea\x7d\x1c\x21\x93\xa8\x25\xc3\x67\x57\x43\x94\x26\xba\x52\xa6\xee\x6e\x60\x9a\xfa\x00\x4c\x2b\x78\xaa\xe6\x48\x05\x5f\xb0\xcc\x96\x18\x2a\x38\x47\xaa\xd9\x33\xd3\xeb\x8d\x29\xae\x51\x6f\xec\xb0\xfd\x3d\x36\xc2\xf6\xfd\xf7\x5b\x20\xc3\xfd\x06\x68\x45\x9a\x62\x8e\x1a\x5b\x1c\x78\x69\x0f\x36\x8a\x47\x8f\xb1\xee\xd1\xd1\xf7\xab\xef\x35\xf9\x66\x04\x1b\x5f\x11\xc8\x99\xd2\xc6\x4f\x9e\x51\xb5\xb8\xe0\xc6\x90\x1c\xc5\xcf\x5d\xae\x30\x67\xaf\xed\x8e\xc4\xe8\x78\x18\x51\x25\x79\x5d\x22\x6d\x95\x95\x85\xcd\x4d\x5f\x24\x48\xc9\xc0\xa4\x66\xe0\xae\x6b\xd4\xbe\x25\x19\x05\xe4\x47\xdb\xd7\x3b\x20\xfd\xfb\x57\x03\xe8\xd5\x3d\x80\x8d\xa4\x29\x70\x91\x22\x94\x42\xe4\xa6\xa5\x20\xdb\x32\x82\xe9\x4e\x14\x5e\xa4\xe9\x58\xa4\x78\x6f\x88\x8f\x82\x87\x18\x4d\x70\xf0\xea\x05\x24\x31\x8a\x7e\x5f\x15\xd9\xe4\xd6\x16\xf0\x42\x8a\xe2\x00\x64\x97\x4e\x5b\xd4\xf1\x73\x5b\xea\xfd\x38\xf6\xce\xdc\x6b\xa0\x6f\x85\xa9\x28\xc9\x5d\xa5\xe4\x55\x31\x47\x69\x32\xb0\x20\x74\xc9\x38\x2a\xb0\x7d\x6b\x80\xdf\xb4\x93\x7b\xe1\x4f\x8c\xb4\x2d\xfa\xe8\x31\x06\x1f\x1d\xfd\x80\xdf\xab\x57\x76\xbb\x4f\xdf\xaa\xcc\x24\x49\xd1\x2b\xa2\x3c\xf4\x8c\x3d\x23\xdf\x01\x7d\x8d\xfa\xd1\x91\xfb\xd2\xd3\x4c\xe2\xce\xd3\x9d\xb4\xee\xa4\x7c\xf5\x4a\xe6\x01\x1e\x4a\x78\xad\xb1\x28\xb5\x49\xf5\xda\x22\xbb\x97\x4d\xac\x34\x1c\xc5\xcf\x31\xc6\xf8\xec\xd5\xfd\xbe\x83\xea\x90\xeb\xbf\xf6\x7a\xc8\xab\xa2\xee\x91\x26\xae\x5b\xd8\x74\x4a\x63\xa1\x41\xa1\xb6\x8f\x93\xe9\xc5\xf4\x71\x32\x7b\x1c\x4f\xee\xaf\x86\xa3\x5f\x47\x57\x97\x70\x0e\xc7\x67\x35\xe9\x74\x89\x70\xff\x70\xf7\x79\x34\x19\xdd\x8d\x47\xe3\x6b\xdb\x79\x20\x30\x9e\x9a\xd6\x0c\x95\xcd\xb1\xba\x03\x61\x0a\xe6\x68\xc6\x16\x6a\xfb\xa7\x74\x60\xa5\x44\xec\xe7\xf0\x3e\x92\xfd\xf0\x38\x3e\x28\x76\x49\x8c\x5c\x13\xa2\x4e\xac\xeb\x74\x14\x2c\xaa\x3c\x5f\x43\xa5\xcc\x5c\xe8\x3e\x55\x4b\x3b\x87\x93\xf8\x2b\x57\xc3\xbb\xf1\x70\x74\xd3\xfe\x25\xa2\x41\x89\x02\x61\x25\xe4\x93\x91\x4b\x4c\xb7\x84\xf9\xda\x83\x49\x05\x47\x33\x20\x06\x2a\xbd\x05\x55\xd1\x25\x10\xe5\xe3\xc7\x90\x99\xe3\x82\x58\x85\x85\x74\xe5\xa5\x1e\x47\xbd\x72\x81\x12\xe7\xf0\x21\x52\x70\x32\xbd\xbb\xbf\x7f\xb1\x79\x5d\x69\x4c\xbd\xff\x3c\xe7\x39\xfc\x14\x89\xbc\x7a\x78\xb8\x7b\xd8\x2b\xcf\xcc\xf1\x73\x84\x8a\x3b\x13\x5a\x66\xc7\x75\x0e\x3f\x47\xb2\x2e\xaf\xae\x1f\x2e\x2e\xaf\x2e\xf7\x8a\xf3\x03\xbb\x82\x4a\x99\x6e\x94\xda\x98\xd7\x02\x24\x2a\x6d\x86\x09\xe3\x2e\x58\x54\xdc\x1e\x90\xbc\x6e\x47\x37\xb2\xcf\xe1\x2f\x67\x26\x72\x0b\x54\xca\xcc\x9e\xcd\xfe\x3c\x88\x5f\x52\x60\xbd\x73\xa8\xbf\xae\x85\xc1\x12\x54\x71\x4b\x6c\x26\x7c\x9e\xd9\x79\x6d\x27\xf4\xea\x5e\x46\x2c\xe0\x53\x35\x47\xc9\xd1\x20\x32\x25\xd1\x04\x02\x3a\x1f\xaa\x01\x0c\x05\xd7\x52\xe4\x50\xe6\x84\x6f\xb8\x14\x10\x89\x90\xa2\x36\x03\x3a\x77\x5b\x0a\xa3\xce\xad\xbb\x64\x26\x25\xd2\x41\xa8\xc1\xd3\x2f\x6a\x56\x7f\x30\x8c\xce\xdb\xfa\x52\x5a\x2d\x19\x5d\xda\xf5\x8b\x64\x0a\x23\x68\x34\x54\xc0\x32\x7a\x95\xee\xcd\x8b\xe0\x8b\x35\xe5\xcc\x52\xce\xac\xfe\x51\xa8\xbd\xe0\x6b\xae\xfe\x61\xe9\x32\x2d\x14\xee\xac\x62\xa5\xce\xcc\x4d\xa4\x5c\xc8\x75\x79\xcc\x56\xc1\x60\x3a\x5b\xa2\x5d\x8e\xd8\xdc\xd0\x11\xbe\x15\x51\xd1\xf5\x6b\x4d\xc9\xdc\x06\x08\x95\x2b\x53\x73\x73\xf3\x8a\xa7\x1d\x27\xa6\xa8\x09\xcb\x55\x33\x1a\x3c\xab\x89\xbd\x52\x70\xe5\xad\xe6\xef\x1f\x8d\xc5\x86\xd0\xfa\x22\x80\x10\x0d\x43\x2f\x89\xb8\x5c\x88\x27\x4c\xa1\x2a\xdb\xe3\xad\x55\x74\xc3\x34\xa3\x46\x9a\xbb\x52\xa3\xd6\x4a\x63\xb1\x0b\x3e\x84\x72\x69\xd1\xef\x05\xd4\x1c\x92\x42\x8f\x10\x6d\x6a\x4a\xf0\xed\xff\x53\x4e\x75\x2d\x20\x45\xa5\xa5\x58\x1f\x44\xb5\x3b\x69\x6d\xbf\x30\x14\x55\x9e\x46\xd8\xe6\x58\x0b\xf6\x09\xda\xe6\xd7\xc9\x66\xb8\x35\xac\x61\x14\x78\x45\xfc\xf4\xdb\xed\x3b\x3f\x41\xc1\x1f\xdd\xc7\x3f\xe4\x03\xcf\x74\xd3\x3a\xdb\xd5\xb9\xd3\x12\x6e\xbb\x3a\x87\x44\xfb\xa2\x6d\x6f\x35\xbb\x48\x53\xe6\x8a\x6a\xcb\x60\x16\xaf\x0b\x3a\x44\x3a\x82\x59\xad\x55\xf3\xfe\xec\xe6\x8f\x3b\x8c\x8d\x63\x3e\xb4\x81\x0c\xa2\xf5\x7f\x13\x6a\x98\x11\xc1\x16\x45\x8b\x7a\x89\x62\x7e\xed\x10\x1b\xd0\x37\x2f\xf7\x6f\xb6\x5e\x5c\x55\xb7\x97\xd3\x0d\x99\x63\xbe\xb5\x9d\x91\xcd\xbd\xfd\x08\xe4\xe6\xf0\xf0\xa5\x47\xf2\xaa\x8b\xc1\x9d\xd5\x11\x5a\x2b\xef\xb7\xd3\xce\xce\x6e\x60\x50\xe8\xc2\x3e\xba\x18\xeb\xf1\x6a\xeb\xf5\x8e\x4b\x2a\xd2\xdf\x2a\xa1\x36\xbb\xf0\x0e\x91\x51\x5e\x35\xed\xe1\x45\x44\x48\xd7\x25\x46\x23\x9f\x16\xc1\x66\xf0\x48\x69\xc2\x53\x22\x53\x73\x19\x65\x65\xf5\x26\x34\x02\xe3\xe6\x94\xa2\x15\xd1\xcc\x83\xdd\x61\xd2\x9e\x32\xae\x3f\x9c\x00\x15\x15\xd7\x9b\xd8\x3f\x6c\xbe\x1d\x83\x75\x1a\x89\x07\x49\xe2\xb9\x36\xfd\xfb\x3e\x67\x37\x8c\xdb\x64\x3d\x6c\xd1\x93\x3f\xc1\xa2\x1f\xbe\xdd\xa2\x3f\xd5\x16\xbd\x46\x1d\xb6\x6d\x76\x11\xed\x76\x4e\x41\x91\xdf\x2e\x97\x5c\xfd\x4f\x12\x70\xc5\xde\xd8\xa1\xe6\xae\x6f\x95\x5d\xbe\xe6\xc5\xb0\x00\x51\xa2\x74\xfe\x33\x9d\xca\xdd\xa7\x8e\x3b\xb9\x16\xd5\xb2\xf3\xda\x4e\x79\x1e\xb6\x26\x59\x3d\x52\x64\xcc\xb4\x29\xa5\x50\x4c\x0b\xb9\xde\x10\x7a\xe3\x65\x4c\x07\x7d\xe3\xfb\xb3\xa6\xa0\x25\x51\xcb\x3a\x34\x8c\x24\x2a\x8a\x82\xe9\x36\x29\xee\x64\xeb\xd4\xee\xbe\x4c\x4b\x44\x0b\x95\xe6\x48\x38\xac\x96\xc8\x61\x5e\xb1\xbc\x55\xac\x21\x9e\xb9\xb1\x60\xe3\x5b\x2f\xfa\xd2\xbc\x14\x0b\xcb\x9b\x36\x79\xed\xcb\x59\xea\xf8\x7e\x8a\xf8\x3e\x6f\x3d\x9c\x09\x33\x4d\xa4\xae\x04\x17\x25\xf3\x53\x4a\xa8\x83\x08\xec\xf3\x73\x24\x67\xe8\x38\xa4\x15\xd1\xe4\xa3\xf5\xa1\x1d\x3b\x02\xae\xfb\x9c\x68\xe3\x39\x60\xda\x19\xc1\x11\xa6\x36\x7c\x12\x90\x15\xb7\x7f\x99\x13\xbc\x29\xb1\xac\x19\xcf\xe1\xaf\xf5\x20\xde\x6b\x40\x0a\x82\xc2\x1e\xb5\xc4\x8a\x47\x33\x0b\xaf\xb7\x96\x4e\x67\xdf\xf6\x65\x6f\x8f\xe7\x06\xde\x15\xda\x01\x86\x0a\xae\x58\x8a\x56\x7f\x83\xcf\x6f\x1a\x5e\xd2\xcb\xee\x5f\xea\x04\x4d\x20\xe1\xcd\x16\xd0\x7f\xa5\xbb\x03\xb4\x6a\x47\x93\x56\x29\x94\x62\xf3\x1c\xc1\xfd\x25\x9d\x8b\x55\x5c\xc2\xea\x2b\xac\xe6\x69\x5a\x6c\x67\x7b\xf3\x27\xd9\xa8\x05\x80\x15\xb2\xc2\x70\x55\x20\xfe\x11\xdd\xbb\xe1\x5c\xd8\xa9\x73\x73\x9e\x22\xca\x4d\x49\x04\x54\x45\x29\x2a\xb5\xa8\xf2\xee\x91\x29\x10\x1b\xaf\xac\x0f\xd8\x41\xc4\xdb\x71\x53\xf7\x43\xd5\x3d\xdd\xb8\x15\xff\x6d\x70\x57\x18\x29\x2d\xcd\xd3\x8b\x07\xcd\x93\x2e\x08\x87\xc7\xcc\xed\xa6\xf7\x9b\x07\xcd\x9d\x39\xe7\x5b\x0c\xe7\x17\xd8\x5b\xdb\xbd\xd8\x70\x5e\xd6\x56\x71\x13\x5f\x6a\x2b\xb3\x35\xf4\x37\xe6\x9a\x39\xea\xf6\x41\xb0\xcb\x6c\xdf\x1d\x4d\xcd\x65\x78\xbb\x59\x78\xfb\xfc\xec\xd6\xf4\xc1\x32\xfe\xc5\x26\x8a\x22\xd2\xc9\x89\xad\x12\xe9\x65\xc3\x6a\x4f\x3c\xed\x12\xb7\xa3\x88\x1c\x12\x7f\xb8\xab\x12\x8c\x77\xff\xfe\x10\xf1\xc5\x9d\xce\x1e\xb5\x7e\xd4\x63\xff\x0d\x00\x00\xff\xff\xa8\x71\xc1\xf3\x8a\x24\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.proto"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
